<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据链路层</title>
      <link href="/2023/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2023/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><hr><h2 id="本章主要内容"><a href="#本章主要内容" class="headerlink" title="本章主要内容"></a>本章主要内容</h2><ol><li>点对点信道和广播信道的特点，以及对应协议（ppp）（CSMA/CD）的特点</li><li>三个基本问题：封装成帧、透明传输、差错检测</li><li>以太网mac层的硬件地址</li><li>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</li></ol><h3 id="3-1-数据链路层的几个共同问题"><a href="#3-1-数据链路层的几个共同问题" class="headerlink" title="3.1 数据链路层的几个共同问题"></a>3.1 数据链路层的几个共同问题</h3><p>链路：</p><blockquote><p>从下一个节点到相邻结点的一段物理线路，中间无其他交换结点。</p></blockquote><p>数据链路：</p><blockquote><p>物理线路以及实现一些必要的通信协议的硬件和软件</p></blockquote><h4 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1. 封装成帧"></a>1. 封装成帧</h4><p>给一段数据前后分别加上首部和尾部，便于接收端从比特流中辨认帧的开始和结束位置</p><h4 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2. 透明传输"></a>2. 透明传输</h4><p>无论什么样的比特组合的数据，都能按照原样没有差错地通过数据链路层</p><p>也就是说：如果数据中出现了和帧界定符一样的比特组合时，就要采取有效的措施来解决这个问题。</p><h4 id="3-差错检测"><a href="#3-差错检测" class="headerlink" title="3. 差错检测"></a>3. 差错检测</h4><p>传输过程会出现差错（比特差错）难以避免。若判定有差错，那就简单地丢弃这个帧。</p><hr><h3 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h3><p>点对点协议：</p><blockquote><p>PPP (Point-to-Point Protocol)</p></blockquote><h4 id="ppp协议的特点"><a href="#ppp协议的特点" class="headerlink" title="ppp协议的特点"></a>ppp协议的特点</h4><blockquote><p>互联网用户只有连接某个ISP才能接入互联网。PPP协议就是用户计算机和ISP进行通信时所使用的 <em>数据链路层</em> 协议</p></blockquote><p>PPP协议的组成：</p><ul><li><p>一个将IP数据报封装到串行链路的方法。</p></li><li><p>一个用于建立、配置、测试链路连接的 <strong>链路控制协议</strong> LCP(Link Control Protocol)</p></li><li><p>一套<strong>网络控制协议</strong>，这些协议用于支持不同的网络层协议，如IP</p></li></ul><h5 id="1-各字段的意义"><a href="#1-各字段的意义" class="headerlink" title="1. 各字段的意义"></a>1. 各字段的意义</h5><h5 id="2-字节填充"><a href="#2-字节填充" class="headerlink" title="2. 字节填充"></a>2. 字节填充</h5><h5 id="3-零比特填充"><a href="#3-零比特填充" class="headerlink" title="3. 零比特填充"></a>3. 零比特填充</h5><h4 id="ppp协议的工作状态"><a href="#ppp协议的工作状态" class="headerlink" title="ppp协议的工作状态"></a>ppp协议的工作状态</h4><hr><h3 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h3><p>关键词：以太网、局域网</p><p>局域网使用的就是广播信道。</p><h4 id="3-3-1-局域网的数据链路层"><a href="#3-3-1-局域网的数据链路层" class="headerlink" title="3.3.1 局域网的数据链路层"></a>3.3.1 局域网的数据链路层</h4><p>局域网具以下优点：</p><blockquote><ul><li><p>具有广播功能</p></li><li><p>便于系统拓展和逐渐地演变</p></li><li><p>提高了系统的可靠性、可用性、生存性</p></li></ul></blockquote><p>共享信道要解决用户合理共享信道的问题，解决方法如下：</p><blockquote><ul><li><p>静态划分信道</p><p> 频分复用、时分复用、波分复用、码分复用</p></li></ul><ul><li><p>动态媒体接入控制</p><p> 又称为多点接入，信道并非时在用户通信时固定分配给用户</p><ul><li>随机接入：所有用户随机发送信息，可能会产生碰撞。</li><li>受控接入：用户不能随机发送信息，必须服从一定的控制。</li></ul></li></ul></blockquote><h5 id="1-以太网的两个主要标准"><a href="#1-以太网的两个主要标准" class="headerlink" title="1. 以太网的两个主要标准"></a>1. 以太网的两个主要标准</h5><blockquote><ul><li>DIX Ethernet V2</li><li>IEEE 802.3</li></ul></blockquote><p>以上两个标准只有很小的差别</p><p>很多人把采用802.3标准的局域网简称为以太网</p><p>以太网采用<strong>无连接</strong>的工作方式，不必先建立连接就可以直接发送数据。</p><p>以太网提供的服务是 尽最大努力的交付  即不可靠的交付</p><h5 id="2-适配器的作用"><a href="#2-适配器的作用" class="headerlink" title="2. 适配器的作用"></a>2. 适配器的作用</h5><blockquote><p>计算机与外部局域网的连接需要通过适配器</p></blockquote><p>适配器本是主机箱内插入的一块网络接口板，这种接口板又称为网络接口卡，简称网卡。</p><p>现在计算机上已经嵌入了这种适配器，不再使用单独的网卡了</p><h4 id="3-3-2-CSMA-CD协议"><a href="#3-3-2-CSMA-CD协议" class="headerlink" title="3.3.2 CSMA/CD协议"></a>3.3.2 CSMA/CD协议</h4><blockquote><p>CSMA/CD: 载波监听多点接入/碰撞检测(Carrier Sense Multiple Access with Collision Detection)</p></blockquote><h5 id="几个概念："><a href="#几个概念：" class="headerlink" title="几个概念："></a>几个概念：</h5><p>载波监听</p><blockquote><p>边发送边监听。 不管在数据发送前还是数据发送中，每个站都必须不停地检测信道。保证不在其他站发送数据时发送数据，产生干扰。</p></blockquote><p>多点接入</p><blockquote><p>说明是总线型网路，许多计算机以多点接入的方式连接在一根总线上。</p></blockquote><p>碰撞检测</p><blockquote><p>适配器边发送数据，边检测信道上的信号电压的变化情况。当两个或者几个站同时发送数据时，总线上的电压会增大（互相叠加），表明发生了碰撞。一旦发现总线出现了碰撞，适配器就要立即停止发送数据。</p></blockquote><p>尽管有以上技术作为保证，数据在总线上仍然会出现碰撞。（数据在总线上传输是有延时的，上一秒还没监听到信号，下一秒可能信号就传到了，但己方已经把数据发出去了）</p><p>因为同一时间只能有一个站在发送信息，因此只能进行半双工通信，不能进行全双工通信。</p><p>争用期</p><blockquote><p>以太网端到端往返时间 2τ 数据发送后，经过这段时间还没有检测到碰撞，才能肯定这次发送一定不会产生碰撞。</p></blockquote><p>基本退避时间为争用期2τ 具体的争用期时间是51.2微秒</p><p>当数据发送不成功时就要重传，从0—2*k-1  这些整数中随机选出一个数，这个数乘以2τ 就是推迟重传时间（不一定要推迟，可以立即发送）</p><p>当重传16次仍然不成功，那么就丢弃该帧，并向高层报告。（这种情况表明同一时间想发送数据的站太多）</p><p>最短帧</p><p>如果发送的帧很短，那么可能会出现以下情况</p><blockquote><p>发送方发完了这个很短的帧，没有检测到碰撞，但是实际上在发送后这个帧与其他站发送的数据产生了碰撞。</p></blockquote><p>这种情况会导致发送方不知道发送失败了，因此不会重传（数据永久丢失了）</p><p>为了避免这种情况，以太网规定帧长最短不能小于64字节</p><p>最短帧是64字节</p><p>凡是小于64字节的帧都是无效帧，都应该被丢弃</p><p>帧间最小间隔</p><blockquote><p>9.6微秒 </p></blockquote><p>作用是防止接收方来不及反应，留出时间处理上一个帧的缓存</p><p>强化碰撞：</p><p>当发送数据的站检测到碰撞以后，除了立即停止发送数据以外，还需要发送人为的干扰信号，方便让所有站都知道已经发生了碰撞</p><h4 id="3-3-3-使用集线器的星型拓扑"><a href="#3-3-3-使用集线器的星型拓扑" class="headerlink" title="3.3.3 使用集线器的星型拓扑"></a>3.3.3 使用集线器的星型拓扑</h4><h5 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h5><p>10BASE-T标准</p><blockquote><p>10代表10Mbit/s的数据率   base代表信号是基带信号   T代表双绞线</p></blockquote><p>10BASS-F </p><blockquote><p>与10BASE-T类似，F代表光纤</p></blockquote><p>集线器</p><blockquote><p>位于星型拓扑以太网的中心，取代了单一的总线</p></blockquote><p>集线器工作在物理层，只进行转发，不负责碰撞检测。</p><h4 id="3-3-4-以太网的信道利用率"><a href="#3-3-4-以太网的信道利用率" class="headerlink" title="3.3.4 以太网的信道利用率"></a>3.3.4 以太网的信道利用率</h4><p>成功发送一个帧所经历的时间是 T0+τ</p><p>T0: 完整发送一个帧的时间</p><p>τ：从信道起点到终点传输过程中经历的时间</p><blockquote><p>a: 单程端到端时延 τ 与帧的发送时间 T0 之比</p></blockquote><p>a = τ/T0</p><p>a越小，信道利用率越高。 因为a趋近于0时，表示一旦发生碰撞，就能马上检测出来，并立即停止发送。因而信道资源被浪费的时间很少。</p><h4 id="3-3-5-以太网的mac层"><a href="#3-3-5-以太网的mac层" class="headerlink" title="3.3.5 以太网的mac层"></a>3.3.5 以太网的mac层</h4><p>MAC地址：单独表示每个适配器，每个MAC地址全球唯一</p><p>MAC帧的格式：</p><blockquote><p>后面补充</p></blockquote><p>适配器的过滤功能：</p><blockquote><p>适配器每从网络上收到一个mac帧，先用硬件检查帧中的目的地址。如果是发往本站的就收下，如果不是，那就丢弃。</p></blockquote><h3 id="3-4-拓展的以太网"><a href="#3-4-拓展的以太网" class="headerlink" title="3.4 拓展的以太网"></a>3.4 拓展的以太网</h3><h4 id="3-4-1-在物理层拓展以太网"><a href="#3-4-1-在物理层拓展以太网" class="headerlink" title="3.4.1 在物理层拓展以太网"></a>3.4.1 在物理层拓展以太网</h4><p>涉及到的设备：</p><ul><li>光纤和调制解调器：拓展主机和集线器之间的距离</li><li>集线器：代替总线</li></ul><p>涉及的概念：</p><blockquote><p>碰撞域： 又称为冲突域。在这个域内，同一时间只能有一个设备在发数据，否则就会冲突。</p></blockquote><blockquote><p>碰撞域的最大吞吐量： 假设三个系通过集线器连接起来，其中每个系的最大吞吐量都是10Mbit/s 那这个连接起来的碰撞域的最大吞吐量就是30Mbit/s</p></blockquote><p>注意： 如果不同的系使用不同的以太网技术（如：数据率不同），就不能用集线器将他们互联起来。</p><p>如果一个系使用10Mbit/s的适配器，另外的系使用10/100Mbit/s的适配器，连起来后，就只能支持10Mbit/s的工作速率。因为集线器只能转发，不能缓存。</p><h4 id="3-4-2-在数据链路层拓展以太网"><a href="#3-4-2-在数据链路层拓展以太网" class="headerlink" title="3.4.2 在数据链路层拓展以太网"></a>3.4.2 在数据链路层拓展以太网</h4><p>涉及到的设备：</p><ul><li>网桥：根据收到的帧根据其MAC帧目的地址进行转发和过滤。</li><li>交换机：工作在数据链路层，实质上是一个多端口的网桥，每个端口都与一台单独的主机或另一台交换机相连，工作在全双工模式。</li></ul><p>涉及到的概念：</p><blockquote><p>交换机的自学习： 当交换机收到一个帧时，先检测交换表里有没有这个帧目的地址设备的记录，如果有就可以确定需要转发的端口；如果没有，则先在交换表记录下发送这个帧的设备的MAC地址和帧的来源端口，再对除来源端口外的其他端口进行广播。这个过程一直循环，最后交换表里就会存储有连接这台交换机所有站的MAC地址和对应连接端口。</p><p>交换表： 交换机是一种即插即用的设备，其内部有张交换表（地址表），通过自学习，交换表里会存储连接这台交换机的所有站的MAC地址和连接的端口，以便在收到新的帧时，只需要检测帧的目的地址就能直接确定调用哪个端口</p><p>”兜圈子“问题：当网络中存在冗余链路（如：两台交换机存在一个环形回路）时，可能会导致以太网帧再某个环路中无线兜圈子，白白消耗了网络资源。</p><p>解决兜圈子问题的方案：在逻辑上切断环路。IEEE的802.1D标准制定的生成树协议STP</p></blockquote><h4 id="3-4-2-虚拟局域网"><a href="#3-4-2-虚拟局域网" class="headerlink" title="3.4.2 虚拟局域网"></a>3.4.2 虚拟局域网</h4><p>虚拟局域网的作用：</p><blockquote><p>缩小广播域，把一个大的以太网，在逻辑上分割成几个小的以太网，每个小的以太网各自成为新的广播域</p></blockquote><h3 id="3-5-高速以太网"><a href="#3-5-高速以太网" class="headerlink" title="3.5 高速以太网"></a>3.5 高速以太网</h3><p>100BASE-T 以太网</p><blockquote><p>Fast Ethernet快速以太网   在双绞线上传输 100Mbit/s基带信号的星型拓扑以太网，仍使用IEEE802.3的 CSMA/CD 协议。</p></blockquote><p>吉比特以太网</p><blockquote><p>使用802.3z标准，具有以下特点：</p><ul><li>允许在1Gbit/s下以全双工和半双工两种方式工作。</li><li>使用IEEE802.3协议规定的帧格式</li><li>半双工下使用CSMA/CD协议，全双工下不使用</li><li>与10BASE-T和100BASE-T技术向后兼容</li></ul></blockquote><p>10吉比特以太网</p><blockquote><p>帧的格式没有变化。</p><p>只工作在全双工模式。因此不存在争用问题，不适用CSMA/CD协议。</p></blockquote><h3 id="3-6-使用以太网进行宽带接入"><a href="#3-6-使用以太网进行宽带接入" class="headerlink" title="3.6 使用以太网进行宽带接入"></a>3.6 使用以太网进行宽带接入</h3><p>把ppp协议中的ppp帧封装到以太网中来传输————PPPoE（PPP over Ethernet）</p><p>例： 使用光纤到大楼方案（FTTB），用光纤连接每栋大楼，在每栋大楼的楼梯口安装一个光网络单元ONU ，根据用户所申请的带宽，使用5类线接到用户家中。用户只需要用5类线把自己的个人电脑连接到墙上的RJ-45接口上，然后在PPPoE的弹出窗口输入自己在运营商处购买的用户名和密码，就可以进行宽带上网了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 数据链路层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞基础</title>
      <link href="/2023/04/08/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/08/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/XSS%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS漏洞基础"><a href="#XSS漏洞基础" class="headerlink" title="XSS漏洞基础"></a>XSS漏洞基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>xss 跨站脚本攻击(Cross Site Scripting)</p><p>其实应该简称为css，但是这与层叠样式表的缩写重合了，因此改名xss。</p><p>攻击者会在web页面中的input表单、url、留言板等位置插入js代码，导致用户访问时触发，达到攻击目的。</p></blockquote><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>服务器对用户提交的数据没做过滤，或者过滤不严，导致浏览器把用户的输入当成了js代码并直接返回给客户端执行。</p><hr><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>反射型（非持久）</li><li>存储型（持久）</li><li>DOM型（非持久）</li></ul><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><h5 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h5><h6 id="攻击者：发现存在反射型xss的url-gt-构造xss代码-gt-进行编码、缩短（增加迷惑性）-gt-发送给受害者"><a href="#攻击者：发现存在反射型xss的url-gt-构造xss代码-gt-进行编码、缩短（增加迷惑性）-gt-发送给受害者" class="headerlink" title="攻击者：发现存在反射型xss的url  -&gt;  构造xss代码   -&gt;   进行编码、缩短（增加迷惑性）  -&gt;  发送给受害者"></a>攻击者：发现存在反射型xss的url  -&gt;  构造xss代码   -&gt;   进行编码、缩短（增加迷惑性）  -&gt;  发送给受害者</h6><h6 id="受害者：收到链接并点开-gt-xss代码执行"><a href="#受害者：收到链接并点开-gt-xss代码执行" class="headerlink" title="受害者：收到链接并点开  -&gt;  xss代码执行"></a>受害者：收到链接并点开  -&gt;  xss代码执行</h6><blockquote><p>攻击对受害者而言是一次性的。</p></blockquote><p>例：</p><p>php源代码： 发现未做过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试:  在输入框输入xss探针、payload进行测试 发现构造的脚本被执行了</p><p>URL:   观察URL结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=</span><br></pre></td></tr></table></figure><p>构造：  插入脚本语句 <script>alert("xss");</script></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/dvwa/vulnerabilities/xss_r/?name=%3Cscript%3Ealert(%22XSS%22);%3C/script%3E</span><br></pre></td></tr></table></figure><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>应用程序通过web请求获取数据，在未检验是否存在xss代码的情况下就存入数据库。用户下一次请求从数据库中获取该数据的时候，该程序也没进行过滤，最终用户浏览器界面执行xss代码。</p><p>这种xss漏洞的影响是持久性的。由于xss代码被储存在了数据库中，因此每当用户获取这些数据时都会获取到xss代码。只要xss代码仍在数据库中存在，这个过程就还会重现。</p><p>这种类型的xss常见于网站的评论区。用户提交了包含xss代码的留言到数据库，当目标用户查询留言时，留言中的xss代码就会加载出来并被当成脚本执行。</p><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><p>攻击者： 发现存在存储型xss  -&gt;  构造xss代码并提交至网站数据库中</p><p>受害者： 点开目标网站，网站服务端将恶意代码从数据库中取出，拼接在html发送给受害者的浏览器  -&gt; 受害者浏览器收到响应后解析执行，同时恶意代码也被执行</p><p>例：</p><p>php源代码：发现未做过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在评论区发送xss恶意代码，使其被存入网站数据库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure><p>等受害者浏览网页，查看评论区并加载该评论时，浏览器解析到xss代码并执行脚本</p><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><p>通过javascript操作document，实现dom树的重构。</p><p>主要存在于用户能修改页面的dom，造成客户端payload在浏览器中执行</p><p>这个暂时理解不到位，正在深入学…</p><hr><h3 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h3><h4 id="对输入的数据和URL参数进行过滤"><a href="#对输入的数据和URL参数进行过滤" class="headerlink" title="对输入的数据和URL参数进行过滤"></a>对输入的数据和URL参数进行过滤</h4><p>检查是否含有特殊字符 如</p><blockquote><p>&lt;   &gt;    ‘    “</p></blockquote><p>将以上字符过滤，或者编码</p><h4 id="对输出内容进行编码"><a href="#对输出内容进行编码" class="headerlink" title="对输出内容进行编码"></a>对输出内容进行编码</h4><p>变量的内容输出到HTML页面时，用编码或者转义的方式来防御攻击。</p><h4 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h4><p>将字符串js编码转换成实体html编码</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> XSS漏洞基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求报文</title>
      <link href="/2023/04/07/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
      <url>/2023/04/07/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h2><h3 id="HTTP请求由四个部分组成"><a href="#HTTP请求由四个部分组成" class="headerlink" title="HTTP请求由四个部分组成"></a>HTTP请求由四个部分组成</h3><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求数据</li></ul><p>请求行：Method request-URI HTTP-Version CRLF</p><blockquote><p>method：表示请求方法</p><p>Request-URI：统一的资源标识符</p><p>HTTP-Version：表示请求的HTTP协议版本</p><p>CRLF：表示回车和换行</p></blockquote><p>请求头部： 允许客户端传递关于自身的信息和希望的响应形式 </p><p>空行：表示请求头结束，请求正文开始</p><p>请求数据：</p><blockquote><p>get方法：提交数据时，参数会作为url的一部分发送给服务器</p><p>post方法：发送的数据在请求体中</p></blockquote><h3 id="URL-：统一资源定位符（也就是常说的网址）"><a href="#URL-：统一资源定位符（也就是常说的网址）" class="headerlink" title="URL ：统一资源定位符（也就是常说的网址）"></a>URL ：统一资源定位符（也就是常说的网址）</h3><p>一个完整的URL包含以下部分</p><blockquote><p><a href="http://user:pass@www.example.jp/dir/index.htm?uid=1#ch1">http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1</a></p><p>http://  协议方案名</p><p>user:pass 登录信息（认证）</p><p><a href="http://www.example.jp/">www.example.jp</a>  服务器地址</p><p>80 端口号</p><p>/dir/index.htm  带层次的文件路径</p><p>uid=1  查询字符串</p><p>ch1  片段标识符</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> http请求报文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap和hydra常用命令</title>
      <link href="/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/nmap%E5%92%8Chydra%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/nmap%E5%92%8Chydra%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="扫描与爆破"><a href="#扫描与爆破" class="headerlink" title="扫描与爆破"></a>扫描与爆破</h3><p>Nmap<br>重要常用命令参数</p><p><code>-sP     ping扫描</code><br>例：</p><blockquote><p>nmap -sP 10.1.1.0/24  （最后的24是采用二进制表示的掩码的位数）</p></blockquote><p><code>-p     指定端口范围</code><br>例：</p><blockquote><p>nmap -p 21,23 10.1.1.1（探测目标21，23端口情况）</p></blockquote><p><code>-sV      服务版本探测</code><br>例：</p><blockquote><p>nmap -p 23,21 10.1.1.1 -sV</p></blockquote><p><code>-O     启用操作系统探测（同时可以扫描开放的端口号以及对应的服务）</code><br>例：</p><blockquote><p>nmap -O 10.1.1.1</p></blockquote><p><code>-A     全面扫描</code></p><p><code>-oN     保存txt(保存扫描报告)</code><br>例：</p><blockquote><p>nmap -O 10.1.1.1 -oN d:\baogao.txt（保存路径）</p></blockquote><h3 id="hydra-常用命令"><a href="#hydra-常用命令" class="headerlink" title="hydra 常用命令"></a>hydra 常用命令</h3><p>(转载自<a href="https://blog.csdn.net/weixin_63286108/article/details/124700517">https://blog.csdn.net/weixin_63286108/article/details/124700517</a>)</p><p>爆破FTP服务器登录密码（已知用户名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P /usr/passwd.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破FTP服务器的用户名和密码(1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L /usr/uname.txt -P /usr/passwd.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破FTP服务器的用户名和密码(2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -C /usr/u_and_p.txt ftp://192.168.31.134</span><br></pre></td></tr></table></figure><p>爆破远程桌面服务的用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L /usr/uname.txt -P /usr/passwd.txt rdp://192.168.31.134</span><br></pre></td></tr></table></figure><p>(uname.txt、passwd.txt分别为用户名字典和密码字典)</p>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> Nmap和hydra常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim初学</title>
      <link href="/2023/04/05/%E5%B0%8F%E5%AF%84%E5%B7%A7/Vim%E5%88%9D%E5%AD%A6/"/>
      <url>/2023/04/05/%E5%B0%8F%E5%AF%84%E5%B7%A7/Vim%E5%88%9D%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="vim的三个模式"><a href="#vim的三个模式" class="headerlink" title="vim的三个模式"></a>vim的三个模式</h2><p>vim有三个模式</p><ul><li>正常模式</li><li>编辑模式</li><li>命令行模式</li></ul><p>刚打开文件处于正常模式</p><blockquote><p>编辑模式按 esc 会退出到正常模式</p></blockquote><p>要进行编辑需要进入编辑模式</p><blockquote><p>按小写 i，此时下方会提示进入了INSERT模式</p></blockquote><p>保存修改，或不做修改退出，或对文件进行搜索等  要进入命令行模式</p><blockquote><p>正常模式直接输入 : 会进入命令行模式。同样，下方也会有提示“：”</p><p>退出（quit）：输入 :q，回车。（如果对文件做出了修改，那么会出现警示</p><p>不保存退出： 输入 :q! 表示无论如何都要退出</p><p>保存退出（write  quit）： 输入 :wq（先保存，再退出，不能写为 :qw</p></blockquote><h2 id="vim的光标移动"><a href="#vim的光标移动" class="headerlink" title="vim的光标移动"></a>vim的光标移动</h2><p>在正常模式下 h j k l 四个键可以进行光标的移动</p><blockquote><p>k：向上</p><p>j：向下</p><p>h：向左</p><p>l：向右</p></blockquote><p>正常模式下，将光标移动到字符后</p><blockquote><p>按 i ：insert 在字符前面插入字符</p><p>按 a：append 在字符后面追加字符</p><p>大写i：shift+i  插到最前面</p><p>大写a： shift+a  在最后面追加</p><p>o：（open a new line ）在本行的下面新建一行</p><p>大写o： 在本行的上面新建一行</p><p>g：在最后一行下面新建一行</p><p>gg：在最初一行上面增加一行</p><p>w： （word）跳动到下一个词的开头</p><p>e：（end）跳动到单词最后</p><p>b： （back）上一个单词开头</p></blockquote><h2 id="vim的复制、粘贴、删除"><a href="#vim的复制、粘贴、删除" class="headerlink" title="vim的复制、粘贴、删除"></a>vim的复制、粘贴、删除</h2><blockquote><p>ctrl+v： 进入视觉模式（可视化块）类似于平时使用的shift+方向键，用于选中一段文字进行操作</p><p>shift+v：同样是进入视觉模式，不同的是选中一整行，如果向下选择，会把下面的行也选中</p><p>y：复制选中</p><p>yy：（yank）复制当前行</p><p>yw：（yank word）复制当前单词</p></blockquote><blockquote><p>p：（paste）粘贴</p></blockquote><blockquote><p>d: 删除选中</p><p>dd：删除当前行</p><p>dw：（delete a word）删除当前字符</p><p>cw： 替换当前单词（删除当前字符，并且进入编辑模式）</p><p>ci：（change in）删除括号内的内容</p></blockquote><blockquote><p>.  ：重复上一次操作</p><p>u：（undo）撤销上一次操作</p><p>ctrl+r： 恢复前一次操作（不小心撤回过多使用</p></blockquote><h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><blockquote><p>最基本的:q :q! :wq</p></blockquote><blockquote><p>:/+要搜索的字符串： 快速搜索定位</p><p>:%s/旧字符/新字符/g：（最后的g表示gobel，全局替换）把文件中的“旧字符”全部替换成“新字符”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小寄巧 </category>
          
          <category> vim初学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各层常用协议</title>
      <link href="/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%90%84%E5%B1%82%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/04/05/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%90%84%E5%B1%82%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="各层常用协议"><a href="#各层常用协议" class="headerlink" title="各层常用协议"></a>各层常用协议</h1><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><blockquote><p>http  https  SSH  DNS  Telnet   FTP      DHCP    SMTP   POP3   RDP     SMB    MySql<br>80    443     22     53       23    20/21      67/68      25        110      3389      445      3306</p></blockquote><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><blockquote><pre><code> ​    TCP                                 UDP 传输控制协议             用户数据报协议</code></pre></blockquote><h2 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h2><blockquote><p>ICMP<br>Internet Control Message Protocol<br>internet控制报文协议 用于在ip主机、路由器之间传递控制消息（网络是否通，主机是否可达）。</p></blockquote><blockquote><p>IP<br>Internet Protocol<br>网际互连协议：实现大规模、异构网络的互联互通。</p></blockquote><blockquote><p>ARP<br>Address Resolution Protocol<br>地址解析协议：根据IP地址获取物理地址的协议</p></blockquote><h2 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h2><blockquote><p>PPP<br>Point-to-Point Protocal—–ppp点到点：数据链路层封装协议中的一种，常用于广域网，使用串行链路提供远距离数据传输服务。</p></blockquote><blockquote><p>Ethernet<br>以太网：实现链路层的数据传输和地址封装（MAC，常用于局域网。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安基础 </category>
          
          <category> 各层常用协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多进程编程</title>
      <link href="/2023/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Linux%E7%BC%96%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
      <url>/2023/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Linux%E7%BC%96%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux多进程编程"><a href="#Linux多进程编程" class="headerlink" title="Linux多进程编程"></a>Linux多进程编程</h1><hr><h3 id="一、-并发概念"><a href="#一、-并发概念" class="headerlink" title="一、 并发概念"></a>一、 并发概念</h3><p>并发：</p><blockquote><p>指多个活动在同一时间段内同时进行</p></blockquote><h3 id="二、-逻辑控制流"><a href="#二、-逻辑控制流" class="headerlink" title="二、 逻辑控制流"></a>二、 逻辑控制流</h3><p>逻辑流：</p><blockquote><p>在多进程运行环境下，一个程序（或进程）按程序员意图，从main函数开始，一个一个语句，一条一条指令执行，执行轨迹为一系列程序计数器（PC）的值，给人一种每个程序都独占处理器的假象，而一般整个系统可能仅有一个CPU，各进程轮流执行，我们称进程为一个逻辑流</p></blockquote><p>实际上，每个进程的执行过程是不连续的，它们交替使用处理器</p><p>并发流：</p><blockquote><p>只要某种可能的执行模式在时间上存在重叠，它们就是并发流。</p></blockquote><p>并行流：</p><blockquote><p>如果两个流在有部分操作（或代码）同一时刻地运行在<strong>不同的</strong>处理器核或者计算机上，那么我们称它们为并行流(parallel flow)</p></blockquote><p>多任务：</p><blockquote><p>一个进程和其他进程轮流运行的概念</p></blockquote><p><strong>时间片</strong>：</p><blockquote><p>每次分配给一个进程的执行时间称之为<strong>时间片</strong>(time slice)，进程也因此划分为多个做<strong>时间分片</strong>(time slicing)</p></blockquote><h1 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h1><h2 id="初识进程"><a href="#初识进程" class="headerlink" title="初识进程"></a>初识进程</h2><h3 id="一、-什么是进程"><a href="#一、-什么是进程" class="headerlink" title="一、 什么是进程"></a>一、 什么是进程</h3><blockquote><p>进程是正在执行中的程序</p></blockquote><h3 id="二、-进程结构"><a href="#二、-进程结构" class="headerlink" title="二、 进程结构"></a>二、 进程结构</h3><p>进程至少包含三项内容：</p><ul><li>程序代码</li><li>数据集</li><li>进程控制块</li></ul><blockquote><p>程序代码：一般是一个包括main函数的可执行程序，程序装载到内存，进程才能启动</p></blockquote><blockquote><p>数据集：进程的处理对象，可认为是变量内容，保存从初始化、环境变量、命令行参数和文件的数据</p></blockquote><blockquote><p>PCB：保存程序代码、数据变量地址、进程其他属性，<em>PCB</em>是进程存在的唯一标志，以后操作系统就通过PCB来对进程实施管理和控制</p></blockquote><h3 id="三、进程属性（保存在PCB中"><a href="#三、进程属性（保存在PCB中" class="headerlink" title="三、进程属性（保存在PCB中"></a>三、进程属性（保存在PCB中</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404143547405.png"></p><p>进程描述信息：</p><blockquote><p>进程号（PID）</p><p>用户标识</p><p>用户组标识</p><p>进程族亲信息：父进程标识、兄弟进程标识</p></blockquote><p>控制信息：</p><blockquote><p>进程状态</p><p>调度信息：优先级、剩余时间片和调度策略</p><p>记时信息：CPU使用时间等</p><p>通信信息：未处理信号、管道、消息队列、共享内存等</p></blockquote><p>资源信息：</p><blockquote><p>存储器地址</p><p>打开文件的信息</p></blockquote><p>cpu现场信息：</p><blockquote><p>当前进程CPU寄存器副本：程序计数器PC、通用寄存器、标识寄存器FLAGS</p></blockquote><h3 id="PCB的实例（Linux任务结构体：task-struct"><a href="#PCB的实例（Linux任务结构体：task-struct" class="headerlink" title="PCB的实例（Linux任务结构体：task_struct"></a>PCB的实例（Linux任务结构体：task_struct</h3><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404144612237.png" alt="image-20230404144612237"></p><h2 id="进程基本状态及转换"><a href="#进程基本状态及转换" class="headerlink" title="进程基本状态及转换"></a>进程基本状态及转换</h2><p>三种基本状态：</p><blockquote><ul><li>就绪</li><li>运行</li><li>阻塞</li></ul></blockquote><p>然而，在操作系统实际设计中往往增加了两种状态</p><blockquote><ul><li>创建</li><li>终止</li></ul></blockquote><p><img src="https://enderman-blog.oss-cn-guangzhou.aliyuncs.com/image-20230404145422917.png" alt="image-20230404145422917"></p><h2 id="操作进程的工具"><a href="#操作进程的工具" class="headerlink" title="操作进程的工具"></a>操作进程的工具</h2><p>ps命令查看进程信息</p><blockquote><p>ps -ef 显示全部进程信息</p></blockquote><blockquote><p><strong>ps</strong> -ef| grep bash 从ps命令中过滤出指定进程信息</p></blockquote><blockquote><p>ps -u  命令显示当前用户拥有进程资源消耗信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
          <category> 多进程编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言常遇到的错误集</title>
      <link href="/2023/04/05/c%E8%AF%AD%E8%A8%80/%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2023/04/05/c%E8%AF%AD%E8%A8%80/%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题"><a href="#当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题" class="headerlink" title="当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题"></a>当遇到数组越界类的错误时，很有可能是宏定义的maxsize出了问题</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 10</span></span><br></pre></td></tr></table></figure><p>宏定义的maxsize过小</p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
          <category> c语言错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/03/hello-world/"/>
      <url>/2023/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
